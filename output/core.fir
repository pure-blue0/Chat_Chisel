circuit core :
  module BHT :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<32>, flip mem_pc : UInt<32>, flip pcsrc : UInt<1>, flip target_pc : UInt<32>, match : UInt<1>, valid : UInt<1>, bht_pred_pc : UInt<32>}

    cmem bhtTable : { tag : UInt<26>, valid : UInt<1>, target_pc : UInt<32>} [16] @[bht.scala 24:21]
    node index = bits(io.pc, 5, 2) @[bht.scala 26:20]
    read mport bhtEntry = bhtTable[index], clock @[bht.scala 28:31]
    node _io_match_T = bits(io.pc, 31, 6) @[bht.scala 30:39]
    node _io_match_T_1 = eq(bhtEntry.tag, _io_match_T) @[bht.scala 30:30]
    io.match <= _io_match_T_1 @[bht.scala 30:14]
    io.valid <= bhtEntry.valid @[bht.scala 31:12]
    io.bht_pred_pc <= bhtEntry.target_pc @[bht.scala 32:18]
    node _T = eq(io.pcsrc, UInt<1>("h1")) @[bht.scala 34:17]
    when _T : @[bht.scala 34:26]
      wire newEntry : { tag : UInt<26>, valid : UInt<1>, target_pc : UInt<32>} @[bht.scala 35:24]
      node _newEntry_tag_T = bits(io.mem_pc, 31, 6) @[bht.scala 36:30]
      newEntry.tag <= _newEntry_tag_T @[bht.scala 36:18]
      newEntry.valid <= UInt<1>("h1") @[bht.scala 37:20]
      newEntry.target_pc <= io.target_pc @[bht.scala 38:24]
      node _T_1 = bits(io.mem_pc, 5, 2) @[bht.scala 39:29]
      write mport MPORT = bhtTable[_T_1], clock
      MPORT.target_pc <= newEntry.target_pc
      MPORT.valid <= newEntry.valid
      MPORT.tag <= newEntry.tag

  module BTB :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<32>, flip mem_pc : UInt<32>, flip pcsrc : UInt<1>, flip branch : UInt<1>, btb_taken : UInt<1>}

    cmem btbTable : UInt<2> [16] @[btb.scala 14:21]
    node _btbEntry_T = bits(io.pc, 5, 2) @[btb.scala 17:32]
    infer mport btbEntry = btbTable[_btbEntry_T], clock @[btb.scala 17:26]
    node btbPredict = bits(btbEntry, 1, 1) @[btb.scala 20:28]
    node _T = eq(io.branch, UInt<1>("h1")) @[btb.scala 23:18]
    when _T : @[btb.scala 23:27]
      node _T_1 = eq(io.pcsrc, UInt<1>("h1")) @[btb.scala 24:19]
      when _T_1 : @[btb.scala 24:28]
        node _T_2 = bits(io.mem_pc, 5, 2) @[btb.scala 26:30]
        infer mport MPORT = btbTable[_T_2], clock @[btb.scala 26:20]
        node _T_3 = lt(MPORT, UInt<2>("h3")) @[btb.scala 26:38]
        when _T_3 : @[btb.scala 26:45]
          node _T_4 = bits(io.mem_pc, 5, 2) @[btb.scala 27:33]
          node _T_5 = bits(io.mem_pc, 5, 2) @[btb.scala 27:59]
          infer mport MPORT_1 = btbTable[_T_5], clock @[btb.scala 27:49]
          node _T_6 = add(MPORT_1, UInt<1>("h1")) @[btb.scala 27:67]
          node _T_7 = tail(_T_6, 1) @[btb.scala 27:67]
          write mport MPORT_2 = btbTable[_T_4], clock
          MPORT_2 <= _T_7
      else :
        node _T_8 = bits(io.mem_pc, 5, 2) @[btb.scala 31:30]
        infer mport MPORT_3 = btbTable[_T_8], clock @[btb.scala 31:20]
        node _T_9 = gt(MPORT_3, UInt<1>("h0")) @[btb.scala 31:38]
        when _T_9 : @[btb.scala 31:45]
          node _T_10 = bits(io.mem_pc, 5, 2) @[btb.scala 32:33]
          node _T_11 = bits(io.mem_pc, 5, 2) @[btb.scala 32:59]
          infer mport MPORT_4 = btbTable[_T_11], clock @[btb.scala 32:49]
          node _T_12 = sub(MPORT_4, UInt<1>("h1")) @[btb.scala 32:67]
          node _T_13 = tail(_T_12, 1) @[btb.scala 32:67]
          write mport MPORT_5 = btbTable[_T_10], clock
          MPORT_5 <= _T_13
    io.btb_taken <= btbPredict @[btb.scala 37:16]

  module Icache :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<32>, inst : UInt<32>}

    cmem cacheData : UInt<32> [1048576] @[Icache.scala 10:22]
    node cacheIndex = bits(io.pc, 17, 2) @[Icache.scala 11:25]
    infer mport cacheEntry = cacheData[cacheIndex], clock @[Icache.scala 15:29]
    io.inst <= cacheEntry @[Icache.scala 16:11]

  module Fetch :
    input clock : Clock
    input reset : Reset
    output io : { flip trap_vector : UInt<32>, flip mret_vector : UInt<32>, flip target_pc : UInt<32>, flip mem_pc : UInt<32>, flip pcsrc : UInt<1>, flip branch : UInt<1>, flip trap : UInt<1>, flip mret : UInt<1>, flip pc_stall : UInt<1>, flip if_id_stall : UInt<1>, flip if_id_flush : UInt<1>, flip predict : UInt<1>, id_pc : UInt<32>, inst : UInt<32>}

    inst bht of BHT @[fetch.scala 28:19]
    bht.clock <= clock
    bht.reset <= reset
    inst btb of BTB @[fetch.scala 29:19]
    btb.clock <= clock
    btb.reset <= reset
    inst icache of Icache @[fetch.scala 30:22]
    icache.clock <= clock
    icache.reset <= reset
    reg pcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h8")) @[fetch.scala 33:22]
    reg idPcReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[fetch.scala 34:24]
    reg instReg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[fetch.scala 35:24]
    bht.io.pc <= pcReg @[fetch.scala 38:13]
    bht.io.mem_pc <= io.mem_pc @[fetch.scala 39:17]
    bht.io.pcsrc <= io.pcsrc @[fetch.scala 40:16]
    bht.io.target_pc <= io.target_pc @[fetch.scala 41:20]
    btb.io.pc <= pcReg @[fetch.scala 43:13]
    btb.io.mem_pc <= io.mem_pc @[fetch.scala 44:17]
    btb.io.pcsrc <= io.pcsrc @[fetch.scala 45:16]
    btb.io.branch <= io.branch @[fetch.scala 46:17]
    icache.io.pc <= pcReg @[fetch.scala 48:16]
    when io.trap : @[fetch.scala 51:17]
      pcReg <= io.trap_vector @[fetch.scala 52:11]
    else :
      when io.mret : @[fetch.scala 53:23]
        pcReg <= io.mret_vector @[fetch.scala 54:11]
      else :
        node _T = eq(io.predict, UInt<1>("h0")) @[fetch.scala 55:26]
        node _T_1 = and(io.pcsrc, _T) @[fetch.scala 55:23]
        when _T_1 : @[fetch.scala 55:39]
          pcReg <= io.target_pc @[fetch.scala 56:11]
        else :
          when io.pc_stall : @[fetch.scala 57:27]
            pcReg <= pcReg @[fetch.scala 58:11]
          else :
            node _T_2 = and(btb.io.btb_taken, bht.io.valid) @[fetch.scala 59:32]
            node _T_3 = and(_T_2, bht.io.match) @[fetch.scala 59:47]
            node _T_4 = neq(_T_3, UInt<1>("h0")) @[fetch.scala 59:65]
            when _T_4 : @[fetch.scala 59:74]
              pcReg <= bht.io.bht_pred_pc @[fetch.scala 60:11]
            else :
              node _pcReg_T = add(pcReg, UInt<3>("h4")) @[fetch.scala 62:20]
              node _pcReg_T_1 = tail(_pcReg_T, 1) @[fetch.scala 62:20]
              pcReg <= _pcReg_T_1 @[fetch.scala 62:11]
    when io.if_id_stall : @[fetch.scala 66:24]
      idPcReg <= idPcReg @[fetch.scala 67:13]
      instReg <= instReg @[fetch.scala 68:13]
    else :
      idPcReg <= pcReg @[fetch.scala 70:13]
      instReg <= icache.io.inst @[fetch.scala 71:13]
    when io.if_id_flush : @[fetch.scala 74:24]
      idPcReg <= UInt<1>("h0") @[fetch.scala 75:13]
      instReg <= UInt<5>("h13") @[fetch.scala 76:13]
    io.id_pc <= idPcReg @[fetch.scala 79:12]
    io.inst <= instReg @[fetch.scala 80:11]

  module Control :
    input clock : Clock
    input reset : Reset
    output io : { flip opcode : UInt<7>, flip funct7 : UInt<7>, flip funct3 : UInt<3>, aluop : UInt<4>, immsrc : UInt<1>, isbranch : UInt<1>, memread : UInt<1>, memwrite : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<2>, pcsel : UInt<1>, rdsel : UInt<1>, isjump : UInt<1>, islui : UInt<1>, use_rs1 : UInt<1>, use_rs2 : UInt<1>}

    wire default : UInt
    default <= UInt<1>("h0")
    io.aluop <= default @[control.scala 27:12]
    io.immsrc <= default @[control.scala 28:13]
    io.isbranch <= default @[control.scala 29:15]
    io.memread <= default @[control.scala 30:14]
    io.memwrite <= default @[control.scala 31:15]
    io.regwrite <= default @[control.scala 32:15]
    io.memtoreg <= default @[control.scala 33:15]
    io.pcsel <= default @[control.scala 34:12]
    io.rdsel <= default @[control.scala 35:12]
    io.isjump <= default @[control.scala 36:13]
    io.islui <= default @[control.scala 37:12]
    io.use_rs1 <= default @[control.scala 38:14]
    io.use_rs2 <= default @[control.scala 39:14]
    node _io_aluop_T = eq(UInt<1>("h0"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_1 = mux(_io_aluop_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_aluop_T_2 = eq(UInt<6>("h20"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_3 = mux(_io_aluop_T_2, UInt<1>("h1"), _io_aluop_T_1) @[Mux.scala 81:58]
    node _io_aluop_T_4 = eq(UInt<3>("h4"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_5 = mux(_io_aluop_T_4, UInt<2>("h2"), _io_aluop_T_3) @[Mux.scala 81:58]
    node _io_aluop_T_6 = eq(UInt<1>("h0"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_7 = mux(_io_aluop_T_6, UInt<3>("h6"), UInt<3>("h6")) @[Mux.scala 81:58]
    node _io_aluop_T_8 = eq(UInt<6>("h20"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_9 = mux(_io_aluop_T_8, UInt<3>("h7"), _io_aluop_T_7) @[Mux.scala 81:58]
    node _io_aluop_T_10 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_11 = mux(_io_aluop_T_10, _io_aluop_T_5, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_aluop_T_12 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_13 = mux(_io_aluop_T_12, UInt<2>("h3"), _io_aluop_T_11) @[Mux.scala 81:58]
    node _io_aluop_T_14 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_15 = mux(_io_aluop_T_14, UInt<3>("h4"), _io_aluop_T_13) @[Mux.scala 81:58]
    node _io_aluop_T_16 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_17 = mux(_io_aluop_T_16, UInt<3>("h5"), _io_aluop_T_15) @[Mux.scala 81:58]
    node _io_aluop_T_18 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_19 = mux(_io_aluop_T_18, _io_aluop_T_9, _io_aluop_T_17) @[Mux.scala 81:58]
    node _io_aluop_T_20 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_21 = mux(_io_aluop_T_20, UInt<4>("h8"), _io_aluop_T_19) @[Mux.scala 81:58]
    node _io_aluop_T_22 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_23 = mux(_io_aluop_T_22, UInt<4>("h9"), _io_aluop_T_21) @[Mux.scala 81:58]
    node _io_aluop_T_24 = eq(UInt<1>("h0"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_25 = mux(_io_aluop_T_24, UInt<3>("h6"), UInt<3>("h6")) @[Mux.scala 81:58]
    node _io_aluop_T_26 = eq(UInt<6>("h20"), io.funct7) @[Mux.scala 81:61]
    node _io_aluop_T_27 = mux(_io_aluop_T_26, UInt<3>("h7"), _io_aluop_T_25) @[Mux.scala 81:58]
    node _io_aluop_T_28 = eq(UInt<3>("h4"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_29 = mux(_io_aluop_T_28, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_aluop_T_30 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_31 = mux(_io_aluop_T_30, UInt<2>("h3"), _io_aluop_T_29) @[Mux.scala 81:58]
    node _io_aluop_T_32 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_33 = mux(_io_aluop_T_32, UInt<3>("h4"), _io_aluop_T_31) @[Mux.scala 81:58]
    node _io_aluop_T_34 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_35 = mux(_io_aluop_T_34, UInt<3>("h5"), _io_aluop_T_33) @[Mux.scala 81:58]
    node _io_aluop_T_36 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_37 = mux(_io_aluop_T_36, _io_aluop_T_27, _io_aluop_T_35) @[Mux.scala 81:58]
    node _io_aluop_T_38 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_39 = mux(_io_aluop_T_38, UInt<4>("h8"), _io_aluop_T_37) @[Mux.scala 81:58]
    node _io_aluop_T_40 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_41 = mux(_io_aluop_T_40, UInt<4>("h9"), _io_aluop_T_39) @[Mux.scala 81:58]
    node _io_aluop_T_42 = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_43 = mux(_io_aluop_T_42, UInt<4>("h8"), UInt<4>("h8")) @[Mux.scala 81:58]
    node _io_aluop_T_44 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_45 = mux(_io_aluop_T_44, UInt<4>("h8"), _io_aluop_T_43) @[Mux.scala 81:58]
    node _io_aluop_T_46 = eq(UInt<3>("h4"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_47 = mux(_io_aluop_T_46, UInt<4>("h8"), _io_aluop_T_45) @[Mux.scala 81:58]
    node _io_aluop_T_48 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_49 = mux(_io_aluop_T_48, UInt<4>("h8"), _io_aluop_T_47) @[Mux.scala 81:58]
    node _io_aluop_T_50 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_51 = mux(_io_aluop_T_50, UInt<4>("h9"), _io_aluop_T_49) @[Mux.scala 81:58]
    node _io_aluop_T_52 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_aluop_T_53 = mux(_io_aluop_T_52, UInt<4>("h9"), _io_aluop_T_51) @[Mux.scala 81:58]
    node _io_aluop_T_54 = eq(UInt<6>("h33"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_55 = mux(_io_aluop_T_54, _io_aluop_T_23, UInt<4>("h0")) @[Mux.scala 81:58]
    node _io_aluop_T_56 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_57 = mux(_io_aluop_T_56, _io_aluop_T_41, _io_aluop_T_55) @[Mux.scala 81:58]
    node _io_aluop_T_58 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_59 = mux(_io_aluop_T_58, UInt<1>("h0"), _io_aluop_T_57) @[Mux.scala 81:58]
    node _io_aluop_T_60 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_61 = mux(_io_aluop_T_60, UInt<1>("h0"), _io_aluop_T_59) @[Mux.scala 81:58]
    node _io_aluop_T_62 = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_63 = mux(_io_aluop_T_62, _io_aluop_T_53, _io_aluop_T_61) @[Mux.scala 81:58]
    node _io_aluop_T_64 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_65 = mux(_io_aluop_T_64, UInt<1>("h0"), _io_aluop_T_63) @[Mux.scala 81:58]
    node _io_aluop_T_66 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_67 = mux(_io_aluop_T_66, UInt<1>("h0"), _io_aluop_T_65) @[Mux.scala 81:58]
    node _io_aluop_T_68 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_69 = mux(_io_aluop_T_68, UInt<1>("h0"), _io_aluop_T_67) @[Mux.scala 81:58]
    node _io_aluop_T_70 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_aluop_T_71 = mux(_io_aluop_T_70, UInt<1>("h0"), _io_aluop_T_69) @[Mux.scala 81:58]
    io.aluop <= _io_aluop_T_71 @[control.scala 43:12]
    node _io_immsrc_T = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_1 = mux(_io_immsrc_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_immsrc_T_2 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_3 = mux(_io_immsrc_T_2, UInt<1>("h0"), _io_immsrc_T_1) @[Mux.scala 81:58]
    node _io_immsrc_T_4 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_5 = mux(_io_immsrc_T_4, UInt<1>("h0"), _io_immsrc_T_3) @[Mux.scala 81:58]
    node _io_immsrc_T_6 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_7 = mux(_io_immsrc_T_6, UInt<1>("h0"), _io_immsrc_T_5) @[Mux.scala 81:58]
    node _io_immsrc_T_8 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_9 = mux(_io_immsrc_T_8, UInt<1>("h1"), _io_immsrc_T_7) @[Mux.scala 81:58]
    node _io_immsrc_T_10 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_11 = mux(_io_immsrc_T_10, UInt<1>("h1"), _io_immsrc_T_9) @[Mux.scala 81:58]
    node _io_immsrc_T_12 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_immsrc_T_13 = mux(_io_immsrc_T_12, UInt<1>("h1"), _io_immsrc_T_11) @[Mux.scala 81:58]
    node _io_immsrc_T_14 = eq(UInt<6>("h33"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_15 = mux(_io_immsrc_T_14, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_immsrc_T_16 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_17 = mux(_io_immsrc_T_16, UInt<1>("h1"), _io_immsrc_T_15) @[Mux.scala 81:58]
    node _io_immsrc_T_18 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_19 = mux(_io_immsrc_T_18, UInt<1>("h1"), _io_immsrc_T_17) @[Mux.scala 81:58]
    node _io_immsrc_T_20 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_21 = mux(_io_immsrc_T_20, UInt<1>("h1"), _io_immsrc_T_19) @[Mux.scala 81:58]
    node _io_immsrc_T_22 = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_23 = mux(_io_immsrc_T_22, UInt<1>("h0"), _io_immsrc_T_21) @[Mux.scala 81:58]
    node _io_immsrc_T_24 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_25 = mux(_io_immsrc_T_24, UInt<1>("h1"), _io_immsrc_T_23) @[Mux.scala 81:58]
    node _io_immsrc_T_26 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_27 = mux(_io_immsrc_T_26, UInt<1>("h1"), _io_immsrc_T_25) @[Mux.scala 81:58]
    node _io_immsrc_T_28 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_29 = mux(_io_immsrc_T_28, UInt<1>("h1"), _io_immsrc_T_27) @[Mux.scala 81:58]
    node _io_immsrc_T_30 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_31 = mux(_io_immsrc_T_30, UInt<1>("h1"), _io_immsrc_T_29) @[Mux.scala 81:58]
    node _io_immsrc_T_32 = eq(UInt<7>("h73"), io.opcode) @[Mux.scala 81:61]
    node _io_immsrc_T_33 = mux(_io_immsrc_T_32, _io_immsrc_T_13, _io_immsrc_T_31) @[Mux.scala 81:58]
    io.immsrc <= _io_immsrc_T_33 @[control.scala 104:13]
    node _io_isbranch_T = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_isbranch_T_1 = mux(_io_isbranch_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.isbranch <= _io_isbranch_T_1 @[control.scala 125:15]
    node _io_memread_T = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_memread_T_1 = mux(_io_memread_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.memread <= _io_memread_T_1 @[control.scala 129:14]
    node _io_memwrite_T = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_memwrite_T_1 = mux(_io_memwrite_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.memwrite <= _io_memwrite_T_1 @[control.scala 133:15]
    node _io_regwrite_T = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_1 = mux(_io_regwrite_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_regwrite_T_2 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_3 = mux(_io_regwrite_T_2, UInt<1>("h1"), _io_regwrite_T_1) @[Mux.scala 81:58]
    node _io_regwrite_T_4 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_5 = mux(_io_regwrite_T_4, UInt<1>("h1"), _io_regwrite_T_3) @[Mux.scala 81:58]
    node _io_regwrite_T_6 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_7 = mux(_io_regwrite_T_6, UInt<1>("h1"), _io_regwrite_T_5) @[Mux.scala 81:58]
    node _io_regwrite_T_8 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_9 = mux(_io_regwrite_T_8, UInt<1>("h1"), _io_regwrite_T_7) @[Mux.scala 81:58]
    node _io_regwrite_T_10 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_11 = mux(_io_regwrite_T_10, UInt<1>("h1"), _io_regwrite_T_9) @[Mux.scala 81:58]
    node _io_regwrite_T_12 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_regwrite_T_13 = mux(_io_regwrite_T_12, UInt<1>("h1"), _io_regwrite_T_11) @[Mux.scala 81:58]
    node _io_regwrite_T_14 = eq(UInt<6>("h33"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_15 = mux(_io_regwrite_T_14, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_regwrite_T_16 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_17 = mux(_io_regwrite_T_16, UInt<1>("h1"), _io_regwrite_T_15) @[Mux.scala 81:58]
    node _io_regwrite_T_18 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_19 = mux(_io_regwrite_T_18, UInt<1>("h1"), _io_regwrite_T_17) @[Mux.scala 81:58]
    node _io_regwrite_T_20 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_21 = mux(_io_regwrite_T_20, UInt<1>("h0"), _io_regwrite_T_19) @[Mux.scala 81:58]
    node _io_regwrite_T_22 = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_23 = mux(_io_regwrite_T_22, UInt<1>("h0"), _io_regwrite_T_21) @[Mux.scala 81:58]
    node _io_regwrite_T_24 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_25 = mux(_io_regwrite_T_24, UInt<1>("h1"), _io_regwrite_T_23) @[Mux.scala 81:58]
    node _io_regwrite_T_26 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_27 = mux(_io_regwrite_T_26, UInt<1>("h1"), _io_regwrite_T_25) @[Mux.scala 81:58]
    node _io_regwrite_T_28 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_29 = mux(_io_regwrite_T_28, UInt<1>("h1"), _io_regwrite_T_27) @[Mux.scala 81:58]
    node _io_regwrite_T_30 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_31 = mux(_io_regwrite_T_30, UInt<1>("h1"), _io_regwrite_T_29) @[Mux.scala 81:58]
    node _io_regwrite_T_32 = eq(UInt<7>("h73"), io.opcode) @[Mux.scala 81:61]
    node _io_regwrite_T_33 = mux(_io_regwrite_T_32, _io_regwrite_T_13, _io_regwrite_T_31) @[Mux.scala 81:58]
    io.regwrite <= _io_regwrite_T_33 @[control.scala 137:15]
    node _io_memtoreg_T = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_1 = mux(_io_memtoreg_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_memtoreg_T_2 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_3 = mux(_io_memtoreg_T_2, UInt<2>("h3"), _io_memtoreg_T_1) @[Mux.scala 81:58]
    node _io_memtoreg_T_4 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_5 = mux(_io_memtoreg_T_4, UInt<2>("h3"), _io_memtoreg_T_3) @[Mux.scala 81:58]
    node _io_memtoreg_T_6 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_7 = mux(_io_memtoreg_T_6, UInt<2>("h3"), _io_memtoreg_T_5) @[Mux.scala 81:58]
    node _io_memtoreg_T_8 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_9 = mux(_io_memtoreg_T_8, UInt<2>("h3"), _io_memtoreg_T_7) @[Mux.scala 81:58]
    node _io_memtoreg_T_10 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_11 = mux(_io_memtoreg_T_10, UInt<2>("h3"), _io_memtoreg_T_9) @[Mux.scala 81:58]
    node _io_memtoreg_T_12 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_memtoreg_T_13 = mux(_io_memtoreg_T_12, UInt<2>("h3"), _io_memtoreg_T_11) @[Mux.scala 81:58]
    node _io_memtoreg_T_14 = eq(UInt<6>("h33"), io.opcode) @[Mux.scala 81:61]
    node _io_memtoreg_T_15 = mux(_io_memtoreg_T_14, UInt<2>("h2"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_memtoreg_T_16 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_memtoreg_T_17 = mux(_io_memtoreg_T_16, UInt<2>("h2"), _io_memtoreg_T_15) @[Mux.scala 81:58]
    node _io_memtoreg_T_18 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_memtoreg_T_19 = mux(_io_memtoreg_T_18, UInt<1>("h1"), _io_memtoreg_T_17) @[Mux.scala 81:58]
    node _io_memtoreg_T_20 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_memtoreg_T_21 = mux(_io_memtoreg_T_20, UInt<1>("h0"), _io_memtoreg_T_19) @[Mux.scala 81:58]
    node _io_memtoreg_T_22 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_memtoreg_T_23 = mux(_io_memtoreg_T_22, UInt<2>("h2"), _io_memtoreg_T_21) @[Mux.scala 81:58]
    node _io_memtoreg_T_24 = eq(UInt<7>("h73"), io.opcode) @[Mux.scala 81:61]
    node _io_memtoreg_T_25 = mux(_io_memtoreg_T_24, _io_memtoreg_T_13, _io_memtoreg_T_23) @[Mux.scala 81:58]
    io.memtoreg <= _io_memtoreg_T_25 @[control.scala 158:15]
    node _io_pcsel_T = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_pcsel_T_1 = mux(_io_pcsel_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_pcsel_T_2 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_pcsel_T_3 = mux(_io_pcsel_T_2, UInt<1>("h1"), _io_pcsel_T_1) @[Mux.scala 81:58]
    io.pcsel <= _io_pcsel_T_3 @[control.scala 175:12]
    node _io_rdsel_T = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_rdsel_T_1 = mux(_io_rdsel_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.rdsel <= _io_rdsel_T_1 @[control.scala 180:12]
    node _io_isjump_T = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_isjump_T_1 = mux(_io_isjump_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_isjump_T_2 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_isjump_T_3 = mux(_io_isjump_T_2, UInt<1>("h1"), _io_isjump_T_1) @[Mux.scala 81:58]
    io.isjump <= _io_isjump_T_3 @[control.scala 184:13]
    node _io_islui_T = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_islui_T_1 = mux(_io_islui_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    io.islui <= _io_islui_T_1 @[control.scala 189:12]
    node _io_use_rs1_T = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_1 = mux(_io_use_rs1_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_use_rs1_T_2 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_3 = mux(_io_use_rs1_T_2, UInt<1>("h1"), _io_use_rs1_T_1) @[Mux.scala 81:58]
    node _io_use_rs1_T_4 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_5 = mux(_io_use_rs1_T_4, UInt<1>("h1"), _io_use_rs1_T_3) @[Mux.scala 81:58]
    node _io_use_rs1_T_6 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_7 = mux(_io_use_rs1_T_6, UInt<1>("h1"), _io_use_rs1_T_5) @[Mux.scala 81:58]
    node _io_use_rs1_T_8 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_9 = mux(_io_use_rs1_T_8, UInt<1>("h0"), _io_use_rs1_T_7) @[Mux.scala 81:58]
    node _io_use_rs1_T_10 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_11 = mux(_io_use_rs1_T_10, UInt<1>("h0"), _io_use_rs1_T_9) @[Mux.scala 81:58]
    node _io_use_rs1_T_12 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs1_T_13 = mux(_io_use_rs1_T_12, UInt<1>("h0"), _io_use_rs1_T_11) @[Mux.scala 81:58]
    node _io_use_rs1_T_14 = eq(UInt<6>("h33"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_15 = mux(_io_use_rs1_T_14, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_use_rs1_T_16 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_17 = mux(_io_use_rs1_T_16, UInt<1>("h1"), _io_use_rs1_T_15) @[Mux.scala 81:58]
    node _io_use_rs1_T_18 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_19 = mux(_io_use_rs1_T_18, UInt<1>("h1"), _io_use_rs1_T_17) @[Mux.scala 81:58]
    node _io_use_rs1_T_20 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_21 = mux(_io_use_rs1_T_20, UInt<1>("h1"), _io_use_rs1_T_19) @[Mux.scala 81:58]
    node _io_use_rs1_T_22 = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_23 = mux(_io_use_rs1_T_22, UInt<1>("h1"), _io_use_rs1_T_21) @[Mux.scala 81:58]
    node _io_use_rs1_T_24 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_25 = mux(_io_use_rs1_T_24, UInt<1>("h0"), _io_use_rs1_T_23) @[Mux.scala 81:58]
    node _io_use_rs1_T_26 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_27 = mux(_io_use_rs1_T_26, UInt<1>("h1"), _io_use_rs1_T_25) @[Mux.scala 81:58]
    node _io_use_rs1_T_28 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_29 = mux(_io_use_rs1_T_28, UInt<1>("h0"), _io_use_rs1_T_27) @[Mux.scala 81:58]
    node _io_use_rs1_T_30 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_31 = mux(_io_use_rs1_T_30, UInt<1>("h0"), _io_use_rs1_T_29) @[Mux.scala 81:58]
    node _io_use_rs1_T_32 = eq(UInt<7>("h73"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs1_T_33 = mux(_io_use_rs1_T_32, _io_use_rs1_T_13, _io_use_rs1_T_31) @[Mux.scala 81:58]
    io.use_rs1 <= _io_use_rs1_T_33 @[control.scala 193:14]
    node _io_use_rs2_T = eq(UInt<1>("h0"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_1 = mux(_io_use_rs2_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_use_rs2_T_2 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_3 = mux(_io_use_rs2_T_2, UInt<1>("h0"), _io_use_rs2_T_1) @[Mux.scala 81:58]
    node _io_use_rs2_T_4 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_5 = mux(_io_use_rs2_T_4, UInt<1>("h0"), _io_use_rs2_T_3) @[Mux.scala 81:58]
    node _io_use_rs2_T_6 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_7 = mux(_io_use_rs2_T_6, UInt<1>("h0"), _io_use_rs2_T_5) @[Mux.scala 81:58]
    node _io_use_rs2_T_8 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_9 = mux(_io_use_rs2_T_8, UInt<1>("h0"), _io_use_rs2_T_7) @[Mux.scala 81:58]
    node _io_use_rs2_T_10 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_11 = mux(_io_use_rs2_T_10, UInt<1>("h0"), _io_use_rs2_T_9) @[Mux.scala 81:58]
    node _io_use_rs2_T_12 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node _io_use_rs2_T_13 = mux(_io_use_rs2_T_12, UInt<1>("h0"), _io_use_rs2_T_11) @[Mux.scala 81:58]
    node _io_use_rs2_T_14 = eq(UInt<6>("h33"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_15 = mux(_io_use_rs2_T_14, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_use_rs2_T_16 = eq(UInt<5>("h13"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_17 = mux(_io_use_rs2_T_16, UInt<1>("h0"), _io_use_rs2_T_15) @[Mux.scala 81:58]
    node _io_use_rs2_T_18 = eq(UInt<2>("h3"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_19 = mux(_io_use_rs2_T_18, UInt<1>("h0"), _io_use_rs2_T_17) @[Mux.scala 81:58]
    node _io_use_rs2_T_20 = eq(UInt<6>("h23"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_21 = mux(_io_use_rs2_T_20, UInt<1>("h1"), _io_use_rs2_T_19) @[Mux.scala 81:58]
    node _io_use_rs2_T_22 = eq(UInt<7>("h63"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_23 = mux(_io_use_rs2_T_22, UInt<1>("h1"), _io_use_rs2_T_21) @[Mux.scala 81:58]
    node _io_use_rs2_T_24 = eq(UInt<7>("h6f"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_25 = mux(_io_use_rs2_T_24, UInt<1>("h0"), _io_use_rs2_T_23) @[Mux.scala 81:58]
    node _io_use_rs2_T_26 = eq(UInt<7>("h67"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_27 = mux(_io_use_rs2_T_26, UInt<1>("h0"), _io_use_rs2_T_25) @[Mux.scala 81:58]
    node _io_use_rs2_T_28 = eq(UInt<6>("h37"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_29 = mux(_io_use_rs2_T_28, UInt<1>("h0"), _io_use_rs2_T_27) @[Mux.scala 81:58]
    node _io_use_rs2_T_30 = eq(UInt<5>("h17"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_31 = mux(_io_use_rs2_T_30, UInt<1>("h0"), _io_use_rs2_T_29) @[Mux.scala 81:58]
    node _io_use_rs2_T_32 = eq(UInt<7>("h73"), io.opcode) @[Mux.scala 81:61]
    node _io_use_rs2_T_33 = mux(_io_use_rs2_T_32, _io_use_rs2_T_13, _io_use_rs2_T_31) @[Mux.scala 81:58]
    io.use_rs2 <= _io_use_rs2_T_33 @[control.scala 214:12]

  module Regfile :
    input clock : Clock
    input reset : Reset
    output io : { flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip wb_rd : UInt<5>, flip writedata : UInt<32>, flip wb_regwrite : UInt<1>, rs1_data : UInt<32>, rs2_data : UInt<32>}

    wire _registers_WIRE : UInt<32>[32] @[regfile.scala 17:34]
    _registers_WIRE[0] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[1] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[2] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[3] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[4] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[5] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[6] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[7] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[8] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[9] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[10] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[11] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[12] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[13] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[14] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[15] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[16] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[17] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[18] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[19] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[20] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[21] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[22] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[23] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[24] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[25] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[26] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[27] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[28] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[29] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[30] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[31] <= UInt<32>("h0") @[regfile.scala 17:34]
    reg registers : UInt<32>[32], clock with :
      reset => (reset, _registers_WIRE) @[regfile.scala 17:26]
    node _io_rs1_data_T = eq(io.id_rs1, UInt<1>("h0")) @[regfile.scala 20:32]
    node _io_rs1_data_T_1 = mux(_io_rs1_data_T, UInt<1>("h0"), registers[io.id_rs1]) @[regfile.scala 20:21]
    io.rs1_data <= _io_rs1_data_T_1 @[regfile.scala 20:15]
    node _io_rs2_data_T = eq(io.id_rs2, UInt<1>("h0")) @[regfile.scala 21:32]
    node _io_rs2_data_T_1 = mux(_io_rs2_data_T, UInt<1>("h0"), registers[io.id_rs2]) @[regfile.scala 21:21]
    io.rs2_data <= _io_rs2_data_T_1 @[regfile.scala 21:15]
    node _T = neq(io.wb_rd, UInt<1>("h0")) @[regfile.scala 24:35]
    node _T_1 = and(io.wb_regwrite, _T) @[regfile.scala 24:23]
    when _T_1 : @[regfile.scala 24:44]
      registers[io.wb_rd] <= io.writedata @[regfile.scala 25:25]

  module ImmGen :
    input clock : Clock
    input reset : Reset
    output io : { flip inst : UInt<32>, imm : UInt<32>}

    node opcode = bits(io.inst, 6, 0) @[immgen.scala 11:23]
    wire fmt : UInt<3>
    fmt <= UInt<3>("h0")
    node _T = eq(UInt<6>("h33"), opcode) @[immgen.scala 14:19]
    when _T : @[immgen.scala 14:19]
      fmt <= UInt<1>("h0") @[immgen.scala 15:29]
    else :
      node _T_1 = eq(UInt<5>("h13"), opcode) @[immgen.scala 14:19]
      when _T_1 : @[immgen.scala 14:19]
        fmt <= UInt<1>("h1") @[immgen.scala 16:29]
      else :
        node _T_2 = eq(UInt<2>("h3"), opcode) @[immgen.scala 14:19]
        when _T_2 : @[immgen.scala 14:19]
          fmt <= UInt<1>("h1") @[immgen.scala 17:29]
        else :
          node _T_3 = eq(UInt<6>("h23"), opcode) @[immgen.scala 14:19]
          when _T_3 : @[immgen.scala 14:19]
            fmt <= UInt<2>("h2") @[immgen.scala 18:29]
          else :
            node _T_4 = eq(UInt<7>("h63"), opcode) @[immgen.scala 14:19]
            when _T_4 : @[immgen.scala 14:19]
              fmt <= UInt<2>("h3") @[immgen.scala 19:29]
            else :
              node _T_5 = eq(UInt<7>("h6f"), opcode) @[immgen.scala 14:19]
              when _T_5 : @[immgen.scala 14:19]
                fmt <= UInt<3>("h4") @[immgen.scala 20:29]
              else :
                node _T_6 = eq(UInt<7>("h67"), opcode) @[immgen.scala 14:19]
                when _T_6 : @[immgen.scala 14:19]
                  fmt <= UInt<3>("h5") @[immgen.scala 21:29]
                else :
                  node _T_7 = eq(UInt<6>("h37"), opcode) @[immgen.scala 14:19]
                  when _T_7 : @[immgen.scala 14:19]
                    fmt <= UInt<3>("h6") @[immgen.scala 22:29]
                  else :
                    node _T_8 = eq(UInt<5>("h17"), opcode) @[immgen.scala 14:19]
                    when _T_8 : @[immgen.scala 14:19]
                      fmt <= UInt<3>("h7") @[immgen.scala 23:29]
    wire imm : UInt<32>
    imm <= UInt<32>("h0")
    node _T_9 = eq(UInt<1>("h0"), fmt) @[immgen.scala 28:16]
    when _T_9 : @[immgen.scala 28:16]
      imm <= UInt<1>("h0") @[immgen.scala 29:25]
    else :
      node _T_10 = eq(UInt<1>("h1"), fmt) @[immgen.scala 28:16]
      when _T_10 : @[immgen.scala 28:16]
        node _imm_T = bits(io.inst, 31, 31) @[immgen.scala 30:48]
        node _imm_T_1 = bits(_imm_T, 0, 0) @[Bitwise.scala 74:15]
        node _imm_T_2 = mux(_imm_T_1, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
        node _imm_T_3 = bits(io.inst, 31, 20) @[immgen.scala 30:62]
        node _imm_T_4 = cat(_imm_T_2, _imm_T_3) @[Cat.scala 31:58]
        imm <= _imm_T_4 @[immgen.scala 30:25]
      else :
        node _T_11 = eq(UInt<2>("h2"), fmt) @[immgen.scala 28:16]
        when _T_11 : @[immgen.scala 28:16]
          node _imm_T_5 = bits(io.inst, 31, 31) @[immgen.scala 31:48]
          node _imm_T_6 = bits(_imm_T_5, 0, 0) @[Bitwise.scala 74:15]
          node _imm_T_7 = mux(_imm_T_6, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
          node _imm_T_8 = bits(io.inst, 31, 25) @[immgen.scala 31:62]
          node _imm_T_9 = bits(io.inst, 11, 7) @[immgen.scala 31:79]
          node imm_hi = cat(_imm_T_7, _imm_T_8) @[Cat.scala 31:58]
          node _imm_T_10 = cat(imm_hi, _imm_T_9) @[Cat.scala 31:58]
          imm <= _imm_T_10 @[immgen.scala 31:25]
        else :
          node _T_12 = eq(UInt<2>("h3"), fmt) @[immgen.scala 28:16]
          when _T_12 : @[immgen.scala 28:16]
            node _imm_T_11 = bits(io.inst, 31, 31) @[immgen.scala 32:48]
            node _imm_T_12 = bits(_imm_T_11, 0, 0) @[Bitwise.scala 74:15]
            node _imm_T_13 = mux(_imm_T_12, UInt<19>("h7ffff"), UInt<19>("h0")) @[Bitwise.scala 74:12]
            node _imm_T_14 = bits(io.inst, 7, 7) @[immgen.scala 32:62]
            node _imm_T_15 = bits(io.inst, 30, 25) @[immgen.scala 32:74]
            node _imm_T_16 = bits(io.inst, 11, 8) @[immgen.scala 32:91]
            node imm_lo = cat(_imm_T_16, UInt<1>("h0")) @[Cat.scala 31:58]
            node imm_hi_hi = cat(_imm_T_13, _imm_T_14) @[Cat.scala 31:58]
            node imm_hi_1 = cat(imm_hi_hi, _imm_T_15) @[Cat.scala 31:58]
            node _imm_T_17 = cat(imm_hi_1, imm_lo) @[Cat.scala 31:58]
            imm <= _imm_T_17 @[immgen.scala 32:25]
          else :
            node _T_13 = eq(UInt<3>("h4"), fmt) @[immgen.scala 28:16]
            when _T_13 : @[immgen.scala 28:16]
              node _imm_T_18 = bits(io.inst, 31, 31) @[immgen.scala 33:48]
              node _imm_T_19 = bits(_imm_T_18, 0, 0) @[Bitwise.scala 74:15]
              node _imm_T_20 = mux(_imm_T_19, UInt<11>("h7ff"), UInt<11>("h0")) @[Bitwise.scala 74:12]
              node _imm_T_21 = bits(io.inst, 19, 12) @[immgen.scala 33:62]
              node _imm_T_22 = bits(io.inst, 20, 20) @[immgen.scala 33:79]
              node _imm_T_23 = bits(io.inst, 30, 21) @[immgen.scala 33:92]
              node imm_lo_1 = cat(_imm_T_23, UInt<1>("h0")) @[Cat.scala 31:58]
              node imm_hi_hi_1 = cat(_imm_T_20, _imm_T_21) @[Cat.scala 31:58]
              node imm_hi_2 = cat(imm_hi_hi_1, _imm_T_22) @[Cat.scala 31:58]
              node _imm_T_24 = cat(imm_hi_2, imm_lo_1) @[Cat.scala 31:58]
              imm <= _imm_T_24 @[immgen.scala 33:25]
            else :
              node _T_14 = eq(UInt<3>("h5"), fmt) @[immgen.scala 28:16]
              when _T_14 : @[immgen.scala 28:16]
                node _imm_T_25 = bits(io.inst, 31, 31) @[immgen.scala 34:48]
                node _imm_T_26 = bits(_imm_T_25, 0, 0) @[Bitwise.scala 74:15]
                node _imm_T_27 = mux(_imm_T_26, UInt<20>("hfffff"), UInt<20>("h0")) @[Bitwise.scala 74:12]
                node _imm_T_28 = bits(io.inst, 31, 20) @[immgen.scala 34:62]
                node _imm_T_29 = cat(_imm_T_27, _imm_T_28) @[Cat.scala 31:58]
                imm <= _imm_T_29 @[immgen.scala 34:25]
              else :
                node _T_15 = eq(UInt<3>("h6"), fmt) @[immgen.scala 28:16]
                when _T_15 : @[immgen.scala 28:16]
                  node _imm_T_30 = bits(io.inst, 31, 12) @[immgen.scala 35:39]
                  node _imm_T_31 = mux(UInt<1>("h0"), UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 74:12]
                  node _imm_T_32 = cat(_imm_T_30, _imm_T_31) @[Cat.scala 31:58]
                  imm <= _imm_T_32 @[immgen.scala 35:25]
                else :
                  node _T_16 = eq(UInt<3>("h7"), fmt) @[immgen.scala 28:16]
                  when _T_16 : @[immgen.scala 28:16]
                    node _imm_T_33 = bits(io.inst, 31, 12) @[immgen.scala 36:39]
                    node _imm_T_34 = mux(UInt<1>("h0"), UInt<12>("hfff"), UInt<12>("h0")) @[Bitwise.scala 74:12]
                    node _imm_T_35 = cat(_imm_T_33, _imm_T_34) @[Cat.scala 31:58]
                    imm <= _imm_T_35 @[immgen.scala 36:25]
    io.imm <= imm @[immgen.scala 40:10]

  module Decode :
    input clock : Clock
    input reset : Reset
    output io : { flip id_pc : UInt<32>, flip inst : UInt<32>, csr_read : UInt<1>, csr_write : UInt<1>, csr_address : UInt<12>, ecause_out : UInt<4>, exception_out : UInt<1>, mret_out : UInt<1>, wfi_out : UInt<1>, ex_pc : UInt<32>, aluop : UInt<4>, immsrc : UInt<1>, isbranch : UInt<1>, memread : UInt<1>, memwrite : UInt<1>, regwrite : UInt<1>, memtoreg : UInt<2>, pcsel : UInt<1>, rdsel : UInt<1>, isjump : UInt<1>, islui : UInt<1>, rs1_data : UInt<32>, rs2_data : UInt<32>, imm : UInt<32>, funct3 : UInt<32>, ex_rs1 : UInt<5>, ex_rs2 : UInt<5>, ex_rd : UInt<5>, ex_use_rs1 : UInt<1>, ex_use_rs2 : UInt<1>, flip wb_rd : UInt<5>, flip wb_regwrite : UInt<1>, flip writedata : UInt<32>, flip id_ex_flush : UInt<1>, id_rs1 : UInt<5>, id_rs2 : UInt<5>, use_rs1 : UInt<1>, use_rs2 : UInt<1>}

    inst control of Control @[decode.scala 52:23]
    control.clock <= clock
    control.reset <= reset
    inst regfile of Regfile @[decode.scala 53:23]
    regfile.clock <= clock
    regfile.reset <= reset
    inst immGen of ImmGen @[decode.scala 54:22]
    immGen.clock <= clock
    immGen.reset <= reset
    reg csr_read_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 57:29]
    reg csr_write_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 58:30]
    reg csr_address_reg : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[decode.scala 59:32]
    reg ecause_out_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[decode.scala 60:31]
    reg exception_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 61:34]
    reg mret_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 62:29]
    reg wfi_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 63:28]
    reg id_ex_pc_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[decode.scala 64:29]
    reg id_ex_aluop_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[decode.scala 65:32]
    reg id_ex_immsrc_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 66:33]
    reg id_ex_isbranch_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 67:35]
    reg id_ex_memread_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 68:34]
    reg id_ex_memwrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 69:35]
    reg id_ex_regwrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 70:35]
    reg id_ex_memtoreg_reg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[decode.scala 71:35]
    reg id_ex_pcsel_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 72:32]
    reg id_ex_rdsel_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 73:32]
    reg id_ex_isjump_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 74:33]
    reg id_ex_islui_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 75:32]
    reg id_ex_rs1_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[decode.scala 76:35]
    reg id_ex_rs2_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[decode.scala 77:35]
    reg id_ex_imm_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[decode.scala 78:30]
    reg id_ex_funct3_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[decode.scala 79:33]
    reg id_ex_ex_rs1_reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[decode.scala 80:33]
    reg id_ex_ex_rs2_reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[decode.scala 81:33]
    reg id_ex_ex_rd_reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[decode.scala 82:32]
    reg id_ex_ex_use_rs1_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 83:37]
    reg id_ex_ex_use_rs2_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[decode.scala 84:37]
    node _control_io_opcode_T = bits(io.inst, 6, 0) @[decode.scala 87:31]
    control.io.opcode <= _control_io_opcode_T @[decode.scala 87:21]
    node _control_io_funct7_T = bits(io.inst, 31, 25) @[decode.scala 88:31]
    control.io.funct7 <= _control_io_funct7_T @[decode.scala 88:21]
    node _control_io_funct3_T = bits(io.inst, 14, 12) @[decode.scala 89:31]
    control.io.funct3 <= _control_io_funct3_T @[decode.scala 89:21]
    node _regfile_io_id_rs1_T = bits(io.inst, 19, 15) @[decode.scala 91:31]
    regfile.io.id_rs1 <= _regfile_io_id_rs1_T @[decode.scala 91:21]
    node _regfile_io_id_rs2_T = bits(io.inst, 24, 20) @[decode.scala 92:31]
    regfile.io.id_rs2 <= _regfile_io_id_rs2_T @[decode.scala 92:21]
    regfile.io.wb_rd <= io.wb_rd @[decode.scala 93:20]
    regfile.io.writedata <= io.writedata @[decode.scala 94:24]
    regfile.io.wb_regwrite <= io.wb_regwrite @[decode.scala 95:26]
    immGen.io.inst <= io.inst @[decode.scala 97:18]
    node _csrInst_T = bits(io.inst, 6, 0) @[decode.scala 100:24]
    node csrInst = eq(_csrInst_T, UInt<7>("h73")) @[decode.scala 100:38]
    node _csrrwInst_T = bits(io.inst, 14, 12) @[decode.scala 101:37]
    node _csrrwInst_T_1 = eq(_csrrwInst_T, UInt<1>("h1")) @[decode.scala 101:53]
    node csrrwInst = and(csrInst, _csrrwInst_T_1) @[decode.scala 101:27]
    node _csrrsInst_T = bits(io.inst, 14, 12) @[decode.scala 102:37]
    node _csrrsInst_T_1 = eq(_csrrsInst_T, UInt<2>("h2")) @[decode.scala 102:53]
    node csrrsInst = and(csrInst, _csrrsInst_T_1) @[decode.scala 102:27]
    node _csrrcInst_T = bits(io.inst, 14, 12) @[decode.scala 103:37]
    node _csrrcInst_T_1 = eq(_csrrcInst_T, UInt<2>("h3")) @[decode.scala 103:53]
    node csrrcInst = and(csrInst, _csrrcInst_T_1) @[decode.scala 103:27]
    node _csrrwiInst_T = bits(io.inst, 14, 12) @[decode.scala 104:38]
    node _csrrwiInst_T_1 = eq(_csrrwiInst_T, UInt<3>("h5")) @[decode.scala 104:54]
    node csrrwiInst = and(csrInst, _csrrwiInst_T_1) @[decode.scala 104:28]
    node _csrrsiInst_T = bits(io.inst, 14, 12) @[decode.scala 105:38]
    node _csrrsiInst_T_1 = eq(_csrrsiInst_T, UInt<3>("h6")) @[decode.scala 105:54]
    node csrrsiInst = and(csrInst, _csrrsiInst_T_1) @[decode.scala 105:28]
    node _csrrciInst_T = bits(io.inst, 14, 12) @[decode.scala 106:38]
    node _csrrciInst_T_1 = eq(_csrrciInst_T, UInt<3>("h7")) @[decode.scala 106:54]
    node csrrciInst = and(csrInst, _csrrciInst_T_1) @[decode.scala 106:28]
    wire csr_read : UInt<1>
    csr_read <= csrInst
    wire csr_write : UInt<1>
    csr_write <= csrInst
    node _T = bits(io.inst, 11, 7) @[decode.scala 111:41]
    node _T_1 = eq(_T, UInt<1>("h0")) @[decode.scala 111:56]
    node _T_2 = and(csrrwiInst, _T_1) @[decode.scala 111:31]
    node _T_3 = or(csrrwInst, _T_2) @[decode.scala 111:16]
    when _T_3 : @[decode.scala 111:66]
      csr_read <= UInt<1>("h0") @[decode.scala 112:12]
    node _T_4 = or(csrrsInst, csrrcInst) @[decode.scala 114:17]
    node _T_5 = or(_T_4, csrrsiInst) @[decode.scala 114:30]
    node _T_6 = or(_T_5, csrrciInst) @[decode.scala 114:44]
    node _T_7 = bits(io.inst, 19, 15) @[decode.scala 114:69]
    node _T_8 = eq(_T_7, UInt<1>("h0")) @[decode.scala 114:85]
    node _T_9 = and(_T_6, _T_8) @[decode.scala 114:59]
    when _T_9 : @[decode.scala 114:94]
      csr_write <= UInt<1>("h0") @[decode.scala 115:13]
    node mret_out = eq(io.inst, UInt<30>("h30200073")) @[decode.scala 118:26]
    node wfi_out = eq(io.inst, UInt<29>("h10500073")) @[decode.scala 119:25]
    when io.id_ex_flush : @[decode.scala 123:25]
      id_ex_pc_reg <= UInt<1>("h0") @[decode.scala 124:18]
      id_ex_aluop_reg <= UInt<1>("h0") @[decode.scala 125:21]
      id_ex_immsrc_reg <= UInt<1>("h0") @[decode.scala 126:22]
      id_ex_isbranch_reg <= UInt<1>("h0") @[decode.scala 127:24]
      id_ex_memread_reg <= UInt<1>("h0") @[decode.scala 128:23]
      id_ex_memwrite_reg <= UInt<1>("h0") @[decode.scala 129:24]
      id_ex_regwrite_reg <= UInt<1>("h0") @[decode.scala 130:24]
      id_ex_memtoreg_reg <= UInt<1>("h0") @[decode.scala 131:24]
      id_ex_pcsel_reg <= UInt<1>("h0") @[decode.scala 132:21]
      id_ex_rdsel_reg <= UInt<1>("h0") @[decode.scala 133:21]
      id_ex_isjump_reg <= UInt<1>("h0") @[decode.scala 134:22]
      id_ex_islui_reg <= UInt<1>("h0") @[decode.scala 135:21]
      id_ex_rs1_data_reg <= UInt<1>("h0") @[decode.scala 136:24]
      id_ex_rs2_data_reg <= UInt<1>("h0") @[decode.scala 137:24]
      id_ex_imm_reg <= UInt<1>("h0") @[decode.scala 138:19]
      id_ex_funct3_reg <= UInt<1>("h0") @[decode.scala 139:22]
      id_ex_ex_rs1_reg <= UInt<1>("h0") @[decode.scala 140:22]
      id_ex_ex_rs2_reg <= UInt<1>("h0") @[decode.scala 141:22]
      id_ex_ex_rd_reg <= UInt<1>("h0") @[decode.scala 142:21]
      id_ex_ex_use_rs1_reg <= UInt<1>("h0") @[decode.scala 143:26]
      id_ex_ex_use_rs2_reg <= UInt<1>("h0") @[decode.scala 144:26]
      csr_read_reg <= UInt<1>("h0") @[decode.scala 145:18]
      csr_write_reg <= UInt<1>("h0") @[decode.scala 146:19]
      csr_address_reg <= UInt<1>("h0") @[decode.scala 147:21]
      ecause_out_reg <= UInt<1>("h0") @[decode.scala 148:20]
      exception_out_reg <= UInt<1>("h0") @[decode.scala 149:23]
      mret_out_reg <= UInt<1>("h0") @[decode.scala 150:18]
      wfi_out_reg <= UInt<1>("h0") @[decode.scala 151:17]
    else :
      csr_read_reg <= csr_read @[decode.scala 153:18]
      csr_write_reg <= csr_write @[decode.scala 154:19]
      node _csr_address_reg_T = bits(io.inst, 31, 20) @[decode.scala 155:31]
      csr_address_reg <= _csr_address_reg_T @[decode.scala 155:21]
      ecause_out_reg <= UInt<1>("h0") @[decode.scala 156:20]
      exception_out_reg <= UInt<1>("h0") @[decode.scala 157:23]
      mret_out_reg <= mret_out @[decode.scala 158:18]
      wfi_out_reg <= wfi_out @[decode.scala 159:17]
      id_ex_pc_reg <= io.id_pc @[decode.scala 160:18]
      id_ex_aluop_reg <= control.io.aluop @[decode.scala 161:21]
      id_ex_immsrc_reg <= control.io.immsrc @[decode.scala 162:22]
      id_ex_isbranch_reg <= control.io.isbranch @[decode.scala 163:24]
      id_ex_memread_reg <= control.io.memread @[decode.scala 164:23]
      id_ex_memwrite_reg <= control.io.memwrite @[decode.scala 165:24]
      id_ex_regwrite_reg <= control.io.regwrite @[decode.scala 166:24]
      id_ex_memtoreg_reg <= control.io.memtoreg @[decode.scala 167:24]
      id_ex_pcsel_reg <= control.io.pcsel @[decode.scala 168:21]
      id_ex_rdsel_reg <= control.io.rdsel @[decode.scala 169:21]
      id_ex_isjump_reg <= control.io.isjump @[decode.scala 170:22]
      id_ex_islui_reg <= control.io.islui @[decode.scala 171:21]
      id_ex_rs1_data_reg <= regfile.io.rs1_data @[decode.scala 172:24]
      id_ex_rs2_data_reg <= regfile.io.rs2_data @[decode.scala 173:24]
      id_ex_imm_reg <= immGen.io.imm @[decode.scala 174:19]
      node _id_ex_funct3_reg_T = bits(io.inst, 14, 12) @[decode.scala 175:32]
      id_ex_funct3_reg <= _id_ex_funct3_reg_T @[decode.scala 175:22]
      node _id_ex_ex_rs1_reg_T = bits(io.inst, 19, 15) @[decode.scala 176:32]
      id_ex_ex_rs1_reg <= _id_ex_ex_rs1_reg_T @[decode.scala 176:22]
      node _id_ex_ex_rs2_reg_T = bits(io.inst, 24, 20) @[decode.scala 177:32]
      id_ex_ex_rs2_reg <= _id_ex_ex_rs2_reg_T @[decode.scala 177:22]
      node _id_ex_ex_rd_reg_T = bits(io.inst, 11, 7) @[decode.scala 178:31]
      id_ex_ex_rd_reg <= _id_ex_ex_rd_reg_T @[decode.scala 178:21]
      id_ex_ex_use_rs1_reg <= control.io.use_rs1 @[decode.scala 179:26]
      id_ex_ex_use_rs2_reg <= control.io.use_rs2 @[decode.scala 180:26]
    io.csr_read <= csr_read_reg @[decode.scala 187:15]
    io.csr_write <= csr_write_reg @[decode.scala 188:16]
    io.csr_address <= csr_address_reg @[decode.scala 189:18]
    io.ecause_out <= ecause_out_reg @[decode.scala 190:17]
    io.exception_out <= exception_out_reg @[decode.scala 191:20]
    io.mret_out <= mret_out_reg @[decode.scala 192:15]
    io.wfi_out <= wfi_out_reg @[decode.scala 193:14]
    io.ex_pc <= id_ex_pc_reg @[decode.scala 194:12]
    io.aluop <= id_ex_aluop_reg @[decode.scala 195:12]
    io.immsrc <= id_ex_immsrc_reg @[decode.scala 196:13]
    io.isbranch <= id_ex_isbranch_reg @[decode.scala 197:15]
    io.memread <= id_ex_memread_reg @[decode.scala 198:14]
    io.memwrite <= id_ex_memwrite_reg @[decode.scala 199:15]
    io.regwrite <= id_ex_regwrite_reg @[decode.scala 200:15]
    io.memtoreg <= id_ex_memtoreg_reg @[decode.scala 201:15]
    io.pcsel <= id_ex_pcsel_reg @[decode.scala 202:12]
    io.rdsel <= id_ex_rdsel_reg @[decode.scala 203:12]
    io.isjump <= id_ex_isjump_reg @[decode.scala 204:13]
    io.islui <= id_ex_islui_reg @[decode.scala 205:12]
    io.rs1_data <= id_ex_rs1_data_reg @[decode.scala 206:15]
    io.rs2_data <= id_ex_rs2_data_reg @[decode.scala 207:15]
    io.imm <= id_ex_imm_reg @[decode.scala 208:10]
    io.funct3 <= id_ex_funct3_reg @[decode.scala 209:13]
    io.ex_rs1 <= id_ex_ex_rs1_reg @[decode.scala 210:13]
    io.ex_rs2 <= id_ex_ex_rs2_reg @[decode.scala 211:13]
    io.ex_rd <= id_ex_ex_rd_reg @[decode.scala 212:12]
    io.ex_use_rs1 <= id_ex_ex_use_rs1_reg @[decode.scala 213:17]
    io.ex_use_rs2 <= id_ex_ex_use_rs2_reg @[decode.scala 214:17]
    node _io_id_rs1_T = bits(io.inst, 19, 15) @[decode.scala 217:23]
    io.id_rs1 <= _io_id_rs1_T @[decode.scala 217:13]
    node _io_id_rs2_T = bits(io.inst, 24, 20) @[decode.scala 218:23]
    io.id_rs2 <= _io_id_rs2_T @[decode.scala 218:13]
    io.use_rs1 <= control.io.use_rs1 @[decode.scala 219:14]
    io.use_rs2 <= control.io.use_rs2 @[decode.scala 220:14]

  module AluSelect :
    input clock : Clock
    input reset : Reset
    output io : { flip rs1_data : UInt<32>, flip rs2_data : UInt<32>, flip imm : UInt<32>, flip mem_aluresult : UInt<32>, flip writedata : UInt<32>, flip immsrc : UInt<1>, flip islui : UInt<1>, flip forward1 : UInt<2>, flip forward2 : UInt<2>, alu_in1 : UInt<32>, alu_in2 : UInt<32>}

    node _select1_T = eq(io.forward1, UInt<1>("h0")) @[aluselect.scala 21:18]
    node _select1_T_1 = eq(io.forward1, UInt<1>("h1")) @[aluselect.scala 22:18]
    node _select1_T_2 = eq(io.forward1, UInt<2>("h2")) @[aluselect.scala 23:18]
    node _select1_T_3 = mux(_select1_T_2, io.writedata, io.rs1_data) @[Mux.scala 101:16]
    node _select1_T_4 = mux(_select1_T_1, io.mem_aluresult, _select1_T_3) @[Mux.scala 101:16]
    node select1 = mux(_select1_T, io.rs1_data, _select1_T_4) @[Mux.scala 101:16]
    node _alu_in1_T = eq(io.islui, UInt<1>("h1")) @[aluselect.scala 25:30]
    node alu_in1 = mux(_alu_in1_T, UInt<1>("h0"), select1) @[aluselect.scala 25:20]
    node _select2_T = eq(io.forward2, UInt<1>("h0")) @[aluselect.scala 29:18]
    node _select2_T_1 = eq(io.forward2, UInt<1>("h1")) @[aluselect.scala 30:18]
    node _select2_T_2 = eq(io.forward2, UInt<2>("h2")) @[aluselect.scala 31:18]
    node _select2_T_3 = mux(_select2_T_2, io.writedata, io.rs2_data) @[Mux.scala 101:16]
    node _select2_T_4 = mux(_select2_T_1, io.mem_aluresult, _select2_T_3) @[Mux.scala 101:16]
    node select2 = mux(_select2_T, io.rs2_data, _select2_T_4) @[Mux.scala 101:16]
    node _alu_in2_T = eq(io.immsrc, UInt<1>("h1")) @[aluselect.scala 33:31]
    node alu_in2 = mux(_alu_in2_T, io.imm, select2) @[aluselect.scala 33:20]
    io.alu_in1 <= alu_in1 @[aluselect.scala 36:14]
    io.alu_in2 <= alu_in2 @[aluselect.scala 37:14]

  module ALU :
    input clock : Clock
    input reset : Reset
    output io : { flip alu_in1 : UInt<32>, flip alu_in2 : UInt<32>, flip aluop : UInt<4>, zero : UInt<1>, alu_result : UInt<32>}

    node _add_result_T = add(io.alu_in1, io.alu_in2) @[alu.scala 13:31]
    node add_result = tail(_add_result_T, 1) @[alu.scala 13:31]
    node _sub_result_T = sub(io.alu_in1, io.alu_in2) @[alu.scala 14:31]
    node sub_result = tail(_sub_result_T, 1) @[alu.scala 14:31]
    node xor_result = xor(io.alu_in1, io.alu_in2) @[alu.scala 15:31]
    node or_result = or(io.alu_in1, io.alu_in2) @[alu.scala 16:30]
    node and_result = and(io.alu_in1, io.alu_in2) @[alu.scala 17:31]
    node _sll_result_T = bits(io.alu_in2, 4, 0) @[alu.scala 18:44]
    node sll_result = dshl(io.alu_in1, _sll_result_T) @[alu.scala 18:31]
    node _srl_result_T = bits(io.alu_in2, 4, 0) @[alu.scala 19:44]
    node srl_result = dshr(io.alu_in1, _srl_result_T) @[alu.scala 19:31]
    node _sra_result_T = asSInt(io.alu_in1) @[alu.scala 20:32]
    node _sra_result_T_1 = bits(io.alu_in2, 4, 0) @[alu.scala 20:52]
    node _sra_result_T_2 = dshr(_sra_result_T, _sra_result_T_1) @[alu.scala 20:39]
    node sra_result = asUInt(_sra_result_T_2) @[alu.scala 20:60]
    node _slt_result_T = asSInt(io.alu_in1) @[alu.scala 21:31]
    node _slt_result_T_1 = asSInt(io.alu_in2) @[alu.scala 21:51]
    node slt_result = lt(_slt_result_T, _slt_result_T_1) @[alu.scala 21:38]
    node sltu_result = lt(io.alu_in1, io.alu_in2) @[alu.scala 22:32]
    node _io_zero_T = eq(io.alu_in1, io.alu_in2) @[alu.scala 24:26]
    io.zero <= _io_zero_T @[alu.scala 24:11]
    node _io_alu_result_T = eq(UInt<1>("h0"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_1 = mux(_io_alu_result_T, add_result, UInt<1>("h0")) @[Mux.scala 81:58]
    node _io_alu_result_T_2 = eq(UInt<1>("h1"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_3 = mux(_io_alu_result_T_2, sub_result, _io_alu_result_T_1) @[Mux.scala 81:58]
    node _io_alu_result_T_4 = eq(UInt<2>("h2"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_5 = mux(_io_alu_result_T_4, xor_result, _io_alu_result_T_3) @[Mux.scala 81:58]
    node _io_alu_result_T_6 = eq(UInt<2>("h3"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_7 = mux(_io_alu_result_T_6, or_result, _io_alu_result_T_5) @[Mux.scala 81:58]
    node _io_alu_result_T_8 = eq(UInt<3>("h4"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_9 = mux(_io_alu_result_T_8, and_result, _io_alu_result_T_7) @[Mux.scala 81:58]
    node _io_alu_result_T_10 = eq(UInt<3>("h5"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_11 = mux(_io_alu_result_T_10, sll_result, _io_alu_result_T_9) @[Mux.scala 81:58]
    node _io_alu_result_T_12 = eq(UInt<3>("h6"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_13 = mux(_io_alu_result_T_12, srl_result, _io_alu_result_T_11) @[Mux.scala 81:58]
    node _io_alu_result_T_14 = eq(UInt<3>("h7"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_15 = mux(_io_alu_result_T_14, sra_result, _io_alu_result_T_13) @[Mux.scala 81:58]
    node _io_alu_result_T_16 = eq(UInt<4>("h8"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_17 = mux(_io_alu_result_T_16, slt_result, _io_alu_result_T_15) @[Mux.scala 81:58]
    node _io_alu_result_T_18 = eq(UInt<4>("h9"), io.aluop) @[Mux.scala 81:61]
    node _io_alu_result_T_19 = mux(_io_alu_result_T_18, sltu_result, _io_alu_result_T_17) @[Mux.scala 81:58]
    io.alu_result <= _io_alu_result_T_19 @[alu.scala 26:17]

  module TargetGen :
    input clock : Clock
    input reset : Reset
    output io : { flip ex_pc : UInt<32>, flip imm : UInt<32>, flip alu_result : UInt<32>, flip pcsel : UInt<1>, flip rdsel : UInt<1>, reg_pc : UInt<32>, target_pc : UInt<32>}

    node _T = eq(io.pcsel, UInt<1>("h1")) @[targetgen.scala 14:17]
    when _T : @[targetgen.scala 14:26]
      io.target_pc <= io.alu_result @[targetgen.scala 15:18]
    else :
      node _io_target_pc_T = add(io.ex_pc, io.imm) @[targetgen.scala 17:30]
      node _io_target_pc_T_1 = tail(_io_target_pc_T, 1) @[targetgen.scala 17:30]
      io.target_pc <= _io_target_pc_T_1 @[targetgen.scala 17:18]
    node _T_1 = eq(io.rdsel, UInt<1>("h1")) @[targetgen.scala 20:17]
    when _T_1 : @[targetgen.scala 20:26]
      node _io_reg_pc_T = add(io.ex_pc, io.imm) @[targetgen.scala 21:27]
      node _io_reg_pc_T_1 = tail(_io_reg_pc_T, 1) @[targetgen.scala 21:27]
      io.reg_pc <= _io_reg_pc_T_1 @[targetgen.scala 21:15]
    else :
      node _io_reg_pc_T_2 = add(io.ex_pc, UInt<3>("h4")) @[targetgen.scala 23:27]
      node _io_reg_pc_T_3 = tail(_io_reg_pc_T_2, 1) @[targetgen.scala 23:27]
      io.reg_pc <= _io_reg_pc_T_3 @[targetgen.scala 23:15]

  module Execute :
    input clock : Clock
    input reset : Reset
    output io : { flip csr_read : UInt<1>, flip csr_write : UInt<1>, flip csr_address : UInt<12>, flip ecause_in : UInt<4>, flip exception_in : UInt<1>, flip mret_in : UInt<1>, flip wfi_in : UInt<1>, flip ex_pc : UInt<32>, flip aluop : UInt<4>, flip immsrc : UInt<1>, flip isbranch : UInt<1>, flip memread : UInt<1>, flip memwrite : UInt<1>, flip regwrite : UInt<1>, flip memtoreg : UInt<2>, flip pcsel : UInt<1>, flip rdsel : UInt<1>, flip isjump : UInt<1>, flip islui : UInt<1>, flip rs1_data : UInt<32>, flip rs2_data : UInt<32>, flip imm : UInt<32>, flip funct3 : UInt<32>, flip ex_rs1 : UInt<5>, flip ex_rd : UInt<5>, mem_pc : UInt<32>, target_pc : UInt<32>, flip csr_read_data : UInt<32>, flip readable : UInt<1>, flip writeable : UInt<1>, csr_read_data_out : UInt<32>, csr_write_enable_out : UInt<1>, csr_write_address_out : UInt<12>, csr_write_data_out : UInt<32>, ecause_out : UInt<4>, exception_out : UInt<1>, mret_out : UInt<1>, wfi_out : UInt<1>, reg_pc : UInt<32>, mem_isbranch : UInt<1>, mem_isjump : UInt<1>, mem_memread : UInt<1>, mem_memwrite : UInt<1>, mem_regwrite : UInt<1>, mem_memtoreg : UInt<2>, mem_zero : UInt<1>, mem_aluresult : UInt<32>, mem_rs2_data : UInt<32>, mem_funct3 : UInt<3>, mem_rd : UInt<5>, flip writedata : UInt<32>, flip forward1 : UInt<2>, flip forward2 : UInt<2>, flip ex_mem_flush : UInt<1>}

    inst aluSelect of AluSelect @[execute.scala 69:25]
    aluSelect.clock <= clock
    aluSelect.reset <= reset
    inst alu of ALU @[execute.scala 70:19]
    alu.clock <= clock
    alu.reset <= reset
    inst targetGen of TargetGen @[execute.scala 71:25]
    targetGen.clock <= clock
    targetGen.reset <= reset
    reg mret_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 74:29]
    reg wfi_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 75:28]
    reg ecause_out_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[execute.scala 76:31]
    reg exception_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 77:34]
    reg csr_read_data_out_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 78:38]
    reg csr_write_enable_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 79:41]
    reg csr_write_address_out_reg : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[execute.scala 80:42]
    reg csr_write_data_out_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 81:39]
    reg reg_pc_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 82:27]
    reg target_pc_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 83:30]
    reg mem_pc_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 84:27]
    reg mem_isbranch_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 85:33]
    reg mem_isjump_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 86:31]
    reg mem_memread_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 87:32]
    reg mem_memwrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 88:33]
    reg mem_regwrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 89:33]
    reg mem_memtoreg_reg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[execute.scala 90:33]
    reg mem_zero_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[execute.scala 91:29]
    reg mem_aluresult_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 92:34]
    reg mem_rs2_data_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[execute.scala 93:33]
    reg mem_funct3_reg : UInt<3>, clock with :
      reset => (reset, UInt<3>("h0")) @[execute.scala 94:31]
    reg mem_rd_reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[execute.scala 95:27]
    aluSelect.io.rs1_data <= io.rs1_data @[execute.scala 100:25]
    aluSelect.io.rs2_data <= io.rs2_data @[execute.scala 101:25]
    aluSelect.io.imm <= io.imm @[execute.scala 102:20]
    node _aluSelect_io_mem_aluresult_T = eq(mem_memtoreg_reg, UInt<1>("h0")) @[execute.scala 104:21]
    node _aluSelect_io_mem_aluresult_T_1 = eq(mem_memtoreg_reg, UInt<2>("h3")) @[execute.scala 105:21]
    node _aluSelect_io_mem_aluresult_T_2 = mux(_aluSelect_io_mem_aluresult_T_1, csr_read_data_out_reg, mem_aluresult_reg) @[Mux.scala 101:16]
    node _aluSelect_io_mem_aluresult_T_3 = mux(_aluSelect_io_mem_aluresult_T, reg_pc_reg, _aluSelect_io_mem_aluresult_T_2) @[Mux.scala 101:16]
    aluSelect.io.mem_aluresult <= _aluSelect_io_mem_aluresult_T_3 @[execute.scala 103:30]
    aluSelect.io.writedata <= io.writedata @[execute.scala 107:26]
    aluSelect.io.immsrc <= io.immsrc @[execute.scala 108:23]
    aluSelect.io.islui <= io.islui @[execute.scala 109:22]
    aluSelect.io.forward1 <= io.forward1 @[execute.scala 110:25]
    aluSelect.io.forward2 <= io.forward2 @[execute.scala 111:25]
    alu.io.alu_in1 <= aluSelect.io.alu_in1 @[execute.scala 112:18]
    alu.io.alu_in2 <= aluSelect.io.alu_in2 @[execute.scala 113:18]
    alu.io.aluop <= io.aluop @[execute.scala 114:16]
    targetGen.io.ex_pc <= io.ex_pc @[execute.scala 115:22]
    targetGen.io.imm <= io.imm @[execute.scala 116:20]
    targetGen.io.alu_result <= alu.io.alu_result @[execute.scala 117:27]
    targetGen.io.pcsel <= io.pcsel @[execute.scala 118:22]
    targetGen.io.rdsel <= io.rdsel @[execute.scala 119:22]
    node _csr_write_temp_T = cat(UInt<27>("h0"), io.ex_rs1) @[Cat.scala 31:58]
    node csr_write_temp = mux(io.immsrc, _csr_write_temp_T, io.rs1_data) @[execute.scala 124:27]
    node _csr_write_out_T = or(io.csr_read_data, csr_write_temp) @[execute.scala 128:35]
    node _csr_write_out_T_1 = or(io.csr_read_data, csr_write_temp) @[execute.scala 129:35]
    node _csr_write_out_T_2 = not(csr_write_temp) @[execute.scala 130:37]
    node _csr_write_out_T_3 = and(io.csr_read_data, _csr_write_out_T_2) @[execute.scala 130:35]
    node _csr_write_out_T_4 = not(csr_write_temp) @[execute.scala 131:37]
    node _csr_write_out_T_5 = and(io.csr_read_data, _csr_write_out_T_4) @[execute.scala 131:35]
    node _csr_write_out_T_6 = eq(UInt<1>("h1"), io.funct3) @[Mux.scala 81:61]
    node _csr_write_out_T_7 = mux(_csr_write_out_T_6, csr_write_temp, csr_write_temp) @[Mux.scala 81:58]
    node _csr_write_out_T_8 = eq(UInt<3>("h5"), io.funct3) @[Mux.scala 81:61]
    node _csr_write_out_T_9 = mux(_csr_write_out_T_8, csr_write_temp, _csr_write_out_T_7) @[Mux.scala 81:58]
    node _csr_write_out_T_10 = eq(UInt<2>("h2"), io.funct3) @[Mux.scala 81:61]
    node _csr_write_out_T_11 = mux(_csr_write_out_T_10, _csr_write_out_T, _csr_write_out_T_9) @[Mux.scala 81:58]
    node _csr_write_out_T_12 = eq(UInt<3>("h6"), io.funct3) @[Mux.scala 81:61]
    node _csr_write_out_T_13 = mux(_csr_write_out_T_12, _csr_write_out_T_1, _csr_write_out_T_11) @[Mux.scala 81:58]
    node _csr_write_out_T_14 = eq(UInt<2>("h3"), io.funct3) @[Mux.scala 81:61]
    node _csr_write_out_T_15 = mux(_csr_write_out_T_14, _csr_write_out_T_3, _csr_write_out_T_13) @[Mux.scala 81:58]
    node _csr_write_out_T_16 = eq(UInt<3>("h7"), io.funct3) @[Mux.scala 81:61]
    node csr_write_out = mux(_csr_write_out_T_16, _csr_write_out_T_5, _csr_write_out_T_15) @[Mux.scala 81:58]
    node _csr_exception_T = neq(io.csr_read, io.readable) @[execute.scala 135:36]
    node _csr_exception_T_1 = neq(io.csr_write, io.writeable) @[execute.scala 135:70]
    node csr_exception = or(_csr_exception_T, _csr_exception_T_1) @[execute.scala 135:53]
    when io.ex_mem_flush : @[execute.scala 138:25]
      mret_out_reg <= UInt<1>("h0") @[execute.scala 139:18]
      wfi_out_reg <= UInt<1>("h0") @[execute.scala 140:17]
      ecause_out_reg <= UInt<1>("h0") @[execute.scala 141:24]
      exception_out_reg <= UInt<1>("h0") @[execute.scala 142:27]
      csr_read_data_out_reg <= UInt<1>("h0") @[execute.scala 143:31]
      csr_write_enable_out_reg <= UInt<1>("h0") @[execute.scala 144:34]
      csr_write_address_out_reg <= UInt<1>("h0") @[execute.scala 145:35]
      csr_write_data_out_reg <= UInt<1>("h0") @[execute.scala 146:32]
      reg_pc_reg <= UInt<1>("h0") @[execute.scala 147:20]
      target_pc_reg <= UInt<1>("h0") @[execute.scala 148:23]
      mem_pc_reg <= UInt<1>("h0") @[execute.scala 149:20]
      mem_isbranch_reg <= UInt<1>("h0") @[execute.scala 150:26]
      mem_isjump_reg <= UInt<1>("h0") @[execute.scala 151:24]
      mem_memread_reg <= UInt<1>("h0") @[execute.scala 152:25]
      mem_memwrite_reg <= UInt<1>("h0") @[execute.scala 153:26]
      mem_regwrite_reg <= UInt<1>("h0") @[execute.scala 154:26]
      mem_memtoreg_reg <= UInt<1>("h0") @[execute.scala 155:26]
      mem_zero_reg <= UInt<1>("h0") @[execute.scala 156:22]
      mem_aluresult_reg <= UInt<1>("h0") @[execute.scala 157:27]
      mem_rs2_data_reg <= UInt<1>("h0") @[execute.scala 158:26]
      mem_funct3_reg <= UInt<1>("h0") @[execute.scala 159:24]
      mem_rd_reg <= UInt<1>("h0") @[execute.scala 160:20]
    else :
      mret_out_reg <= io.mret_in @[execute.scala 162:22]
      wfi_out_reg <= io.wfi_in @[execute.scala 163:21]
      node _ecause_out_reg_T = eq(io.exception_in, UInt<1>("h0")) @[execute.scala 164:31]
      node _ecause_out_reg_T_1 = and(_ecause_out_reg_T, csr_exception) @[execute.scala 164:48]
      node _ecause_out_reg_T_2 = mux(_ecause_out_reg_T_1, UInt<2>("h2"), io.ecause_in) @[execute.scala 164:30]
      ecause_out_reg <= _ecause_out_reg_T_2 @[execute.scala 164:24]
      node _exception_out_reg_T = eq(io.exception_in, UInt<1>("h0")) @[execute.scala 165:34]
      node _exception_out_reg_T_1 = and(_exception_out_reg_T, csr_exception) @[execute.scala 165:51]
      node _exception_out_reg_T_2 = mux(_exception_out_reg_T_1, UInt<1>("h1"), io.exception_in) @[execute.scala 165:33]
      exception_out_reg <= _exception_out_reg_T_2 @[execute.scala 165:27]
      csr_read_data_out_reg <= io.csr_read_data @[execute.scala 166:31]
      csr_write_enable_out_reg <= io.csr_write @[execute.scala 167:34]
      csr_write_address_out_reg <= io.csr_address @[execute.scala 168:35]
      csr_write_data_out_reg <= csr_write_out @[execute.scala 169:32]
      reg_pc_reg <= targetGen.io.reg_pc @[execute.scala 170:20]
      target_pc_reg <= targetGen.io.target_pc @[execute.scala 171:23]
      mem_pc_reg <= io.ex_pc @[execute.scala 172:20]
      mem_isbranch_reg <= io.isbranch @[execute.scala 173:26]
      mem_isjump_reg <= io.isjump @[execute.scala 174:24]
      mem_memread_reg <= io.memread @[execute.scala 175:25]
      mem_memwrite_reg <= io.memwrite @[execute.scala 176:26]
      mem_regwrite_reg <= io.regwrite @[execute.scala 177:26]
      mem_memtoreg_reg <= io.memtoreg @[execute.scala 178:26]
      mem_zero_reg <= alu.io.zero @[execute.scala 179:22]
      mem_aluresult_reg <= alu.io.alu_result @[execute.scala 180:27]
      mem_rs2_data_reg <= io.rs2_data @[execute.scala 181:26]
      mem_funct3_reg <= io.funct3 @[execute.scala 182:24]
      mem_rd_reg <= io.ex_rd @[execute.scala 183:20]
    io.mret_out <= mret_out_reg @[execute.scala 187:21]
    io.wfi_out <= wfi_out_reg @[execute.scala 188:20]
    io.ecause_out <= ecause_out_reg @[execute.scala 189:23]
    io.exception_out <= exception_out_reg @[execute.scala 190:26]
    io.csr_read_data_out <= csr_read_data_out_reg @[execute.scala 191:30]
    io.csr_write_enable_out <= csr_write_enable_out_reg @[execute.scala 192:33]
    io.csr_write_address_out <= csr_write_address_out_reg @[execute.scala 193:34]
    io.csr_write_data_out <= csr_write_data_out_reg @[execute.scala 194:31]
    io.reg_pc <= reg_pc_reg @[execute.scala 195:19]
    io.target_pc <= target_pc_reg @[execute.scala 196:22]
    io.mem_pc <= mem_pc_reg @[execute.scala 197:19]
    io.mem_isbranch <= mem_isbranch_reg @[execute.scala 198:25]
    io.mem_isjump <= mem_isjump_reg @[execute.scala 199:23]
    io.mem_memread <= mem_memread_reg @[execute.scala 200:24]
    io.mem_memwrite <= mem_memwrite_reg @[execute.scala 201:25]
    io.mem_regwrite <= mem_regwrite_reg @[execute.scala 202:25]
    io.mem_memtoreg <= mem_memtoreg_reg @[execute.scala 203:25]
    io.mem_zero <= mem_zero_reg @[execute.scala 204:21]
    io.mem_aluresult <= mem_aluresult_reg @[execute.scala 205:26]
    io.mem_rs2_data <= mem_rs2_data_reg @[execute.scala 206:25]
    io.mem_funct3 <= mem_funct3_reg @[execute.scala 207:23]
    io.mem_rd <= mem_rd_reg @[execute.scala 208:19]

  module Branch :
    input clock : Clock
    input reset : Reset
    output io : { flip mem_zero : UInt<1>, flip mem_aluresult : UInt<32>, flip mem_funct3 : UInt<3>, flip mem_isbranch : UInt<1>, flip mem_isjump : UInt<1>, branch : UInt<1>, pcsrc : UInt<1>}

    node _branchEq_T = eq(io.mem_funct3, UInt<1>("h0")) @[branch.scala 18:27]
    node branchEq = and(_branchEq_T, io.mem_zero) @[branch.scala 18:41]
    node _branchNe_T = eq(io.mem_funct3, UInt<1>("h1")) @[branch.scala 19:27]
    node _branchNe_T_1 = eq(io.mem_zero, UInt<1>("h0")) @[branch.scala 19:44]
    node branchNe = and(_branchNe_T, _branchNe_T_1) @[branch.scala 19:41]
    node _branchLt_T = eq(io.mem_funct3, UInt<3>("h4")) @[branch.scala 20:27]
    node _branchLt_T_1 = bits(io.mem_aluresult, 0, 0) @[branch.scala 20:60]
    node branchLt = and(_branchLt_T, _branchLt_T_1) @[branch.scala 20:41]
    node _branchGe_T = eq(io.mem_funct3, UInt<3>("h5")) @[branch.scala 21:27]
    node _branchGe_T_1 = bits(io.mem_aluresult, 0, 0) @[branch.scala 21:61]
    node _branchGe_T_2 = eq(_branchGe_T_1, UInt<1>("h0")) @[branch.scala 21:44]
    node branchGe = and(_branchGe_T, _branchGe_T_2) @[branch.scala 21:41]
    node _branchLtu_T = eq(io.mem_funct3, UInt<3>("h6")) @[branch.scala 22:27]
    node _branchLtu_T_1 = bits(io.mem_aluresult, 0, 0) @[branch.scala 22:60]
    node branchLtu = and(_branchLtu_T, _branchLtu_T_1) @[branch.scala 22:41]
    node _branchGeu_T = eq(io.mem_funct3, UInt<3>("h7")) @[branch.scala 23:27]
    node _branchGeu_T_1 = bits(io.mem_aluresult, 0, 0) @[branch.scala 23:61]
    node _branchGeu_T_2 = eq(_branchGeu_T_1, UInt<1>("h0")) @[branch.scala 23:44]
    node branchGeu = and(_branchGeu_T, _branchGeu_T_2) @[branch.scala 23:41]
    io.branch <= io.mem_isbranch @[branch.scala 25:13]
    node _io_pcsrc_T = or(branchEq, branchNe) @[branch.scala 26:35]
    node _io_pcsrc_T_1 = or(_io_pcsrc_T, branchLt) @[branch.scala 26:47]
    node _io_pcsrc_T_2 = or(_io_pcsrc_T_1, branchGe) @[branch.scala 26:59]
    node _io_pcsrc_T_3 = or(_io_pcsrc_T_2, branchLtu) @[branch.scala 26:71]
    node _io_pcsrc_T_4 = or(_io_pcsrc_T_3, branchGeu) @[branch.scala 26:84]
    node _io_pcsrc_T_5 = and(_io_pcsrc_T_4, io.mem_isbranch) @[branch.scala 26:98]
    node _io_pcsrc_T_6 = or(io.mem_isjump, _io_pcsrc_T_5) @[branch.scala 26:22]
    io.pcsrc <= _io_pcsrc_T_6 @[branch.scala 26:12]

  module DataCache :
    input clock : Clock
    input reset : Reset
    output io : { flip mem_aluresult : UInt<32>, flip mem_rs2_data : UInt<32>, flip mem_memread : UInt<1>, flip mem_funct3 : UInt<3>, flip mem_memwrite : UInt<1>, read_data : UInt<32>}

    cmem mem : UInt<32> [1048576] @[datacache.scala 13:16]
    node address = bits(io.mem_aluresult, 17, 2) @[datacache.scala 15:33]
    node _T = eq(io.mem_memread, UInt<1>("h1")) @[datacache.scala 17:23]
    when _T : @[datacache.scala 17:32]
      read mport cacheData = mem[address], clock @[datacache.scala 19:29]
      wire result : UInt<32> @[datacache.scala 22:22]
      node _T_1 = eq(io.mem_funct3, UInt<1>("h0")) @[datacache.scala 23:24]
      when _T_1 : @[datacache.scala 23:38]
        node _result_T = bits(cacheData, 7, 7) @[datacache.scala 24:39]
        node _result_T_1 = bits(_result_T, 0, 0) @[Bitwise.scala 74:15]
        node _result_T_2 = mux(_result_T_1, UInt<24>("hffffff"), UInt<24>("h0")) @[Bitwise.scala 74:12]
        node _result_T_3 = bits(cacheData, 7, 0) @[datacache.scala 24:54]
        node _result_T_4 = cat(_result_T_2, _result_T_3) @[Cat.scala 31:58]
        result <= _result_T_4 @[datacache.scala 24:14]
      else :
        node _T_2 = eq(io.mem_funct3, UInt<1>("h1")) @[datacache.scala 25:30]
        when _T_2 : @[datacache.scala 25:44]
          node _result_T_5 = bits(cacheData, 15, 15) @[datacache.scala 26:39]
          node _result_T_6 = bits(_result_T_5, 0, 0) @[Bitwise.scala 74:15]
          node _result_T_7 = mux(_result_T_6, UInt<16>("hffff"), UInt<16>("h0")) @[Bitwise.scala 74:12]
          node _result_T_8 = bits(cacheData, 15, 0) @[datacache.scala 26:55]
          node _result_T_9 = cat(_result_T_7, _result_T_8) @[Cat.scala 31:58]
          result <= _result_T_9 @[datacache.scala 26:14]
        else :
          node _T_3 = eq(io.mem_funct3, UInt<2>("h2")) @[datacache.scala 27:30]
          when _T_3 : @[datacache.scala 27:44]
            result <= cacheData @[datacache.scala 28:14]
          else :
            node _T_4 = eq(io.mem_funct3, UInt<3>("h4")) @[datacache.scala 29:30]
            when _T_4 : @[datacache.scala 29:44]
              node _result_T_10 = bits(cacheData, 7, 0) @[datacache.scala 30:41]
              node _result_T_11 = cat(UInt<24>("h0"), _result_T_10) @[Cat.scala 31:58]
              result <= _result_T_11 @[datacache.scala 30:14]
            else :
              node _T_5 = eq(io.mem_funct3, UInt<3>("h5")) @[datacache.scala 31:30]
              when _T_5 : @[datacache.scala 31:44]
                node _result_T_12 = bits(cacheData, 15, 0) @[datacache.scala 32:41]
                node _result_T_13 = cat(UInt<16>("h0"), _result_T_12) @[Cat.scala 31:58]
                result <= _result_T_13 @[datacache.scala 32:14]
              else :
                result <= UInt<1>("h0") @[datacache.scala 34:14]
      io.read_data <= result @[datacache.scala 37:18]
    else :
      node _T_6 = eq(io.mem_memwrite, UInt<1>("h1")) @[datacache.scala 40:26]
      when _T_6 : @[datacache.scala 40:35]
        wire writeData : UInt<32> @[datacache.scala 42:27]
        node _T_7 = eq(io.mem_funct3, UInt<1>("h0")) @[datacache.scala 43:26]
        when _T_7 : @[datacache.scala 43:40]
          read mport writeData_MPORT = mem[address], clock @[datacache.scala 45:34]
          node _writeData_T = bits(writeData_MPORT, 31, 8) @[datacache.scala 45:43]
          node _writeData_T_1 = bits(io.mem_rs2_data, 7, 0) @[datacache.scala 45:67]
          node _writeData_T_2 = cat(_writeData_T, _writeData_T_1) @[Cat.scala 31:58]
          writeData <= _writeData_T_2 @[datacache.scala 45:19]
        else :
          node _T_8 = eq(io.mem_funct3, UInt<1>("h1")) @[datacache.scala 46:32]
          when _T_8 : @[datacache.scala 46:46]
            read mport writeData_MPORT_1 = mem[address], clock @[datacache.scala 48:34]
            node _writeData_T_3 = bits(writeData_MPORT_1, 31, 16) @[datacache.scala 48:43]
            node _writeData_T_4 = bits(io.mem_rs2_data, 15, 0) @[datacache.scala 48:68]
            node _writeData_T_5 = cat(_writeData_T_3, _writeData_T_4) @[Cat.scala 31:58]
            writeData <= _writeData_T_5 @[datacache.scala 48:19]
          else :
            node _T_9 = eq(io.mem_funct3, UInt<2>("h2")) @[datacache.scala 49:32]
            when _T_9 : @[datacache.scala 49:46]
              writeData <= io.mem_rs2_data @[datacache.scala 51:19]
            else :
              writeData <= UInt<1>("h0") @[datacache.scala 53:19]
        write mport MPORT = mem[address], clock
        MPORT <= writeData
      io.read_data <= UInt<1>("h0") @[datacache.scala 59:18]

  module Memory :
    input clock : Clock
    input reset : Reset
    output io : { flip csr_read_data_in : UInt<32>, flip csr_write_enable_in : UInt<1>, flip csr_write_address_in : UInt<12>, flip csr_write_data_in : UInt<32>, flip ecause_in : UInt<4>, flip exception_in : UInt<1>, flip mret_in : UInt<1>, flip wfi_in : UInt<1>, flip reg_pc : UInt<32>, flip mem_isbranch : UInt<1>, flip mem_isjump : UInt<1>, flip mem_memread : UInt<1>, flip mem_memwrite : UInt<1>, flip mem_regwrite : UInt<1>, flip mem_memtoreg : UInt<2>, flip mem_zero : UInt<1>, flip mem_aluresult : UInt<32>, flip mem_rs2_data : UInt<32>, flip mem_funct3 : UInt<3>, flip mem_rd : UInt<5>, flip sip : UInt<1>, flip tip : UInt<1>, flip eip : UInt<1>, csr_write_enable_out : UInt<1>, csr_write_address_out : UInt<12>, csr_write_data_out : UInt<32>, ecause_out : UInt<4>, trapped : UInt<1>, interrupt : UInt<1>, inst_retired : UInt<1>, mret_out : UInt<1>, csr_read_data_out : UInt<32>, wfi_out : UInt<1>, wb_reg_pc : UInt<32>, wb_readdata : UInt<32>, wb_aluresult : UInt<32>, wb_memtoreg : UInt<2>, wb_regwrite : UInt<1>, wb_rd : UInt<5>, pcsrc : UInt<1>, branch : UInt<1>, flip mem_wb_flush : UInt<1>}

    node _load_exception_T = neq(io.mem_rd, UInt<1>("h0")) @[memory.scala 57:53]
    node load_exception = and(io.mem_memread, _load_exception_T) @[memory.scala 57:39]
    node _mem_misaligned_exception_T = or(io.mem_memread, io.mem_memwrite) @[memory.scala 58:50]
    node _mem_misaligned_exception_T_1 = bits(io.mem_aluresult, 1, 0) @[memory.scala 58:90]
    node _mem_misaligned_exception_T_2 = neq(_mem_misaligned_exception_T_1, UInt<1>("h0")) @[memory.scala 58:97]
    node mem_misaligned_exception = and(_mem_misaligned_exception_T, _mem_misaligned_exception_T_2) @[memory.scala 58:70]
    wire exception : UInt<1>
    exception <= UInt<1>("h0")
    wire ecause_out : UInt<4> @[memory.scala 60:24]
    wire interrupt : UInt<1>
    interrupt <= UInt<1>("h0")
    wire trapped : UInt<1>
    trapped <= UInt<1>("h0")
    wire retired : UInt<1>
    retired <= UInt<1>("h0")
    when io.eip : @[memory.scala 65:16]
      ecause_out <= UInt<4>("hb") @[memory.scala 66:16]
      interrupt <= UInt<1>("h1") @[memory.scala 67:15]
    else :
      when io.tip : @[memory.scala 68:22]
        ecause_out <= UInt<3>("h7") @[memory.scala 69:16]
        interrupt <= UInt<1>("h1") @[memory.scala 70:15]
      else :
        when io.sip : @[memory.scala 71:22]
          ecause_out <= UInt<2>("h3") @[memory.scala 72:16]
          interrupt <= UInt<1>("h1") @[memory.scala 73:15]
        else :
          node _T = eq(io.exception_in, UInt<1>("h0")) @[memory.scala 74:14]
          node _T_1 = and(_T, load_exception) @[memory.scala 74:31]
          when _T_1 : @[memory.scala 74:50]
            exception <= UInt<1>("h1") @[memory.scala 75:15]
            ecause_out <= UInt<3>("h5") @[memory.scala 76:16]
            interrupt <= UInt<1>("h0") @[memory.scala 77:15]
          else :
            node _T_2 = eq(io.exception_in, UInt<1>("h0")) @[memory.scala 78:14]
            node _T_3 = and(_T_2, mem_misaligned_exception) @[memory.scala 78:31]
            when _T_3 : @[memory.scala 78:60]
              exception <= UInt<1>("h1") @[memory.scala 79:15]
              node _ecause_out_T = mux(io.mem_memread, UInt<3>("h4"), UInt<3>("h6")) @[memory.scala 80:22]
              ecause_out <= _ecause_out_T @[memory.scala 80:16]
              interrupt <= UInt<1>("h0") @[memory.scala 81:15]
            else :
              exception <= io.exception_in @[memory.scala 83:15]
              ecause_out <= io.ecause_in @[memory.scala 84:16]
              interrupt <= UInt<1>("h0") @[memory.scala 85:15]
    node _trapped_T = or(io.sip, io.tip) @[memory.scala 88:22]
    node _trapped_T_1 = or(_trapped_T, io.eip) @[memory.scala 88:32]
    node _trapped_T_2 = or(_trapped_T_1, exception) @[memory.scala 88:42]
    trapped <= _trapped_T_2 @[memory.scala 88:11]
    node _retired_T = eq(trapped, UInt<1>("h0")) @[memory.scala 89:14]
    node _retired_T_1 = eq(io.wfi_in, UInt<1>("h0")) @[memory.scala 89:26]
    node _retired_T_2 = and(_retired_T, _retired_T_1) @[memory.scala 89:23]
    retired <= _retired_T_2 @[memory.scala 89:11]
    inst branch of Branch @[memory.scala 93:22]
    branch.clock <= clock
    branch.reset <= reset
    branch.io.mem_zero <= io.mem_zero @[memory.scala 94:22]
    branch.io.mem_aluresult <= io.mem_aluresult @[memory.scala 95:27]
    branch.io.mem_funct3 <= io.mem_funct3 @[memory.scala 96:24]
    branch.io.mem_isbranch <= io.mem_isbranch @[memory.scala 97:26]
    branch.io.mem_isjump <= io.mem_isjump @[memory.scala 98:24]
    inst dataCache of DataCache @[memory.scala 101:25]
    dataCache.clock <= clock
    dataCache.reset <= reset
    dataCache.io.mem_aluresult <= io.mem_aluresult @[memory.scala 102:30]
    dataCache.io.mem_rs2_data <= io.mem_rs2_data @[memory.scala 103:29]
    dataCache.io.mem_memread <= io.mem_memread @[memory.scala 104:28]
    dataCache.io.mem_funct3 <= io.mem_funct3 @[memory.scala 105:27]
    node _dataCache_io_mem_memwrite_T = and(io.mem_memwrite, trapped) @[memory.scala 106:48]
    dataCache.io.mem_memwrite <= _dataCache_io_mem_memwrite_T @[memory.scala 106:29]
    reg csr_write_enable_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 109:41]
    reg csr_write_address_out_reg : UInt<12>, clock with :
      reset => (reset, UInt<12>("h0")) @[memory.scala 110:42]
    reg csr_write_data_out_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[memory.scala 111:39]
    reg ecause_out_reg : UInt<4>, clock with :
      reset => (reset, UInt<4>("h0")) @[memory.scala 112:31]
    reg trapped_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 113:28]
    reg interrupt_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 114:30]
    reg inst_retired_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 115:33]
    reg csr_read_data_out_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[memory.scala 116:38]
    reg mret_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 117:29]
    reg wfi_out_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 118:28]
    reg wb_reg_pc_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[memory.scala 119:30]
    reg wb_readdata_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[memory.scala 120:32]
    reg wb_aluresult_reg : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[memory.scala 121:33]
    reg wb_memtoreg_reg : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[memory.scala 122:32]
    reg wb_regwrite_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 123:32]
    reg wb_rd_reg : UInt<5>, clock with :
      reset => (reset, UInt<5>("h0")) @[memory.scala 124:26]
    reg pcsrc_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 125:26]
    reg branch_reg : UInt<1>, clock with :
      reset => (reset, UInt<1>("h0")) @[memory.scala 126:27]
    node _T_4 = eq(io.mem_wb_flush, UInt<1>("h0")) @[memory.scala 130:8]
    when _T_4 : @[memory.scala 130:26]
      csr_write_enable_out_reg <= io.csr_write_enable_in @[memory.scala 131:30]
      csr_write_address_out_reg <= io.csr_write_address_in @[memory.scala 132:31]
      csr_write_data_out_reg <= io.csr_write_data_in @[memory.scala 133:28]
      ecause_out_reg <= ecause_out @[memory.scala 134:20]
      trapped_reg <= trapped @[memory.scala 135:17]
      interrupt_reg <= interrupt @[memory.scala 136:19]
      inst_retired_reg <= retired @[memory.scala 137:22]
      mret_out_reg <= io.mret_in @[memory.scala 138:18]
    else :
      csr_write_enable_out_reg <= UInt<1>("h0") @[memory.scala 140:30]
      csr_write_address_out_reg <= UInt<1>("h0") @[memory.scala 141:31]
      csr_write_data_out_reg <= UInt<1>("h0") @[memory.scala 142:28]
      ecause_out_reg <= UInt<1>("h0") @[memory.scala 143:20]
      trapped_reg <= UInt<1>("h0") @[memory.scala 144:17]
      interrupt_reg <= UInt<1>("h0") @[memory.scala 145:19]
      inst_retired_reg <= UInt<1>("h0") @[memory.scala 146:22]
      mret_out_reg <= UInt<1>("h0") @[memory.scala 147:18]
    node _T_5 = eq(io.mem_wb_flush, UInt<1>("h0")) @[memory.scala 151:8]
    when _T_5 : @[memory.scala 151:26]
      csr_read_data_out_reg <= io.csr_read_data_in @[memory.scala 152:27]
      wfi_out_reg <= io.wfi_in @[memory.scala 153:17]
      wb_reg_pc_reg <= io.reg_pc @[memory.scala 154:19]
      wb_readdata_reg <= dataCache.io.read_data @[memory.scala 155:21]
      wb_aluresult_reg <= io.mem_aluresult @[memory.scala 156:22]
      wb_memtoreg_reg <= io.mem_memtoreg @[memory.scala 157:21]
      wb_regwrite_reg <= io.mem_regwrite @[memory.scala 158:21]
      wb_rd_reg <= io.mem_rd @[memory.scala 159:15]
    else :
      csr_read_data_out_reg <= UInt<1>("h0") @[memory.scala 161:27]
      wfi_out_reg <= UInt<1>("h0") @[memory.scala 162:17]
      wb_reg_pc_reg <= UInt<1>("h0") @[memory.scala 163:19]
      wb_readdata_reg <= UInt<1>("h0") @[memory.scala 164:21]
      wb_aluresult_reg <= UInt<1>("h0") @[memory.scala 165:22]
      wb_memtoreg_reg <= UInt<1>("h0") @[memory.scala 166:21]
      wb_regwrite_reg <= UInt<1>("h0") @[memory.scala 167:21]
      wb_rd_reg <= UInt<1>("h0") @[memory.scala 168:15]
    node _T_6 = eq(io.mem_wb_flush, UInt<1>("h0")) @[memory.scala 172:8]
    when _T_6 : @[memory.scala 172:26]
      pcsrc_reg <= branch.io.pcsrc @[memory.scala 173:15]
      branch_reg <= branch.io.branch @[memory.scala 174:16]
    else :
      pcsrc_reg <= UInt<1>("h0") @[memory.scala 176:15]
      branch_reg <= UInt<1>("h0") @[memory.scala 177:16]
    io.csr_write_enable_out <= csr_write_enable_out_reg @[memory.scala 181:27]
    io.csr_write_address_out <= csr_write_address_out_reg @[memory.scala 182:28]
    io.csr_write_data_out <= csr_write_data_out_reg @[memory.scala 183:25]
    io.ecause_out <= ecause_out_reg @[memory.scala 184:17]
    io.trapped <= trapped_reg @[memory.scala 185:14]
    io.interrupt <= interrupt_reg @[memory.scala 186:16]
    io.inst_retired <= inst_retired_reg @[memory.scala 187:19]
    io.csr_read_data_out <= csr_read_data_out_reg @[memory.scala 188:24]
    io.mret_out <= mret_out_reg @[memory.scala 189:15]
    io.wfi_out <= wfi_out_reg @[memory.scala 190:14]
    io.wb_reg_pc <= wb_reg_pc_reg @[memory.scala 191:16]
    io.wb_readdata <= wb_readdata_reg @[memory.scala 192:18]
    io.wb_aluresult <= wb_aluresult_reg @[memory.scala 193:19]
    io.wb_memtoreg <= wb_memtoreg_reg @[memory.scala 194:18]
    io.wb_regwrite <= wb_regwrite_reg @[memory.scala 195:18]
    io.wb_rd <= wb_rd_reg @[memory.scala 196:12]
    io.pcsrc <= pcsrc_reg @[memory.scala 197:12]
    io.branch <= branch_reg @[memory.scala 198:13]

  module Writeback :
    input clock : Clock
    input reset : Reset
    output io : { flip csr_read_data_in : UInt<32>, flip wb_reg_pc : UInt<32>, flip wb_readdata : UInt<32>, flip wb_aluresult : UInt<32>, flip wb_memtoreg : UInt<2>, writedata : UInt<32>}

    node _io_writedata_T = eq(UInt<1>("h1"), io.wb_memtoreg) @[Mux.scala 81:61]
    node _io_writedata_T_1 = mux(_io_writedata_T, io.wb_readdata, io.wb_reg_pc) @[Mux.scala 81:58]
    node _io_writedata_T_2 = eq(UInt<2>("h2"), io.wb_memtoreg) @[Mux.scala 81:61]
    node _io_writedata_T_3 = mux(_io_writedata_T_2, io.wb_aluresult, _io_writedata_T_1) @[Mux.scala 81:58]
    node _io_writedata_T_4 = eq(UInt<2>("h3"), io.wb_memtoreg) @[Mux.scala 81:61]
    node _io_writedata_T_5 = mux(_io_writedata_T_4, io.csr_read_data_in, _io_writedata_T_3) @[Mux.scala 81:58]
    io.writedata <= _io_writedata_T_5 @[writeback.scala 15:16]

  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip meip : UInt<1>, flip csr_address : UInt<12>, csr_read_data : UInt<32>, readable : UInt<1>, writeable : UInt<1>, flip csr_write_enable : UInt<1>, flip csr_write_address : UInt<1>, flip csr_write_data : UInt<32>, flip inst_retired : UInt<1>, flip trapped : UInt<1>, flip interrupt : UInt<1>, flip mret : UInt<1>, flip ecause : UInt<4>, sip : UInt<1>, tip : UInt<1>, eip : UInt<1>, trap_vector : UInt<32>, mret_vector : UInt<32>}

    reg cycle : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 33:22]
    reg time : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 34:21]
    reg instret : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 35:24]
    reg mvendorid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 36:26]
    reg marchid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 37:24]
    reg mimpid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 38:23]
    reg mhartid : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 39:24]
    reg mstatus : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 42:24]
    reg misa : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 43:21]
    reg mip : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 44:20]
    reg mie : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 45:20]
    reg mtvec : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 46:22]
    reg mscratch : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 47:25]
    reg mepc : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 48:21]
    reg mcause : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 49:23]
    reg mtval : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 50:22]
    reg mcycle : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 51:23]
    reg mtime : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 52:22]
    reg minstret : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[csr.scala 53:25]
    node _T = eq(io.csr_address, UInt<11>("h780")) @[csr.scala 56:23]
    when _T : @[csr.scala 56:37]
      when io.csr_write_enable : @[csr.scala 57:31]
        mstatus <= io.csr_write_data @[csr.scala 58:15]
      io.csr_read_data <= mstatus @[csr.scala 60:22]
    else :
      node _T_1 = eq(io.csr_address, UInt<10>("h301")) @[csr.scala 61:29]
      when _T_1 : @[csr.scala 61:43]
        when io.csr_write_enable : @[csr.scala 62:31]
          misa <= io.csr_write_data @[csr.scala 63:12]
        io.csr_read_data <= misa @[csr.scala 65:22]
      else :
        node _T_2 = eq(io.csr_address, UInt<10>("h344")) @[csr.scala 66:29]
        when _T_2 : @[csr.scala 66:43]
          when io.csr_write_enable : @[csr.scala 67:31]
            mip <= io.csr_write_data @[csr.scala 68:11]
          io.csr_read_data <= mip @[csr.scala 70:22]
        else :
          node _T_3 = eq(io.csr_address, UInt<10>("h304")) @[csr.scala 71:29]
          when _T_3 : @[csr.scala 71:43]
            when io.csr_write_enable : @[csr.scala 72:31]
              mie <= io.csr_write_data @[csr.scala 73:11]
            io.csr_read_data <= mie @[csr.scala 75:22]
          else :
            node _T_4 = eq(io.csr_address, UInt<10>("h305")) @[csr.scala 76:29]
            when _T_4 : @[csr.scala 76:43]
              when io.csr_write_enable : @[csr.scala 77:31]
                mtvec <= io.csr_write_data @[csr.scala 78:13]
              io.csr_read_data <= mtvec @[csr.scala 80:22]
            else :
              node _T_5 = eq(io.csr_address, UInt<10>("h340")) @[csr.scala 81:29]
              when _T_5 : @[csr.scala 81:43]
                when io.csr_write_enable : @[csr.scala 82:31]
                  mscratch <= io.csr_write_data @[csr.scala 83:16]
                io.csr_read_data <= mscratch @[csr.scala 85:22]
              else :
                node _T_6 = eq(io.csr_address, UInt<10>("h341")) @[csr.scala 86:29]
                when _T_6 : @[csr.scala 86:43]
                  when io.csr_write_enable : @[csr.scala 87:31]
                    mepc <= io.csr_write_data @[csr.scala 88:12]
                  io.csr_read_data <= mepc @[csr.scala 90:22]
                else :
                  node _T_7 = eq(io.csr_address, UInt<10>("h342")) @[csr.scala 91:29]
                  when _T_7 : @[csr.scala 91:43]
                    when io.csr_write_enable : @[csr.scala 92:31]
                      mcause <= io.csr_write_data @[csr.scala 93:14]
                    io.csr_read_data <= mcause @[csr.scala 95:22]
                  else :
                    node _T_8 = eq(io.csr_address, UInt<10>("h343")) @[csr.scala 96:29]
                    when _T_8 : @[csr.scala 96:43]
                      when io.csr_write_enable : @[csr.scala 97:31]
                        mtval <= io.csr_write_data @[csr.scala 98:13]
                      io.csr_read_data <= mtval @[csr.scala 100:22]
                    else :
                      node _T_9 = eq(io.csr_address, UInt<12>("hb00")) @[csr.scala 101:29]
                      when _T_9 : @[csr.scala 101:43]
                        io.csr_read_data <= mcycle @[csr.scala 102:22]
                      else :
                        node _T_10 = eq(io.csr_address, UInt<12>("hc00")) @[csr.scala 103:27]
                        when _T_10 : @[csr.scala 103:41]
                          io.csr_read_data <= mtime @[csr.scala 104:22]
                        else :
                          node _T_11 = eq(io.csr_address, UInt<12>("hb02")) @[csr.scala 105:29]
                          when _T_11 : @[csr.scala 105:43]
                            io.csr_read_data <= minstret @[csr.scala 106:22]
                          else :
                            node _T_12 = eq(io.csr_address, UInt<12>("hc02")) @[csr.scala 107:29]
                            when _T_12 : @[csr.scala 107:43]
                              io.csr_read_data <= instret @[csr.scala 108:22]
                            else :
                              node _T_13 = eq(io.csr_address, UInt<9>("h100")) @[csr.scala 109:29]
                              when _T_13 : @[csr.scala 109:43]
                                io.csr_read_data <= cycle @[csr.scala 110:22]
                              else :
                                node _T_14 = eq(io.csr_address, UInt<12>("hc01")) @[csr.scala 111:29]
                                when _T_14 : @[csr.scala 111:43]
                                  io.csr_read_data <= time @[csr.scala 112:22]
                                else :
                                  node _T_15 = eq(io.csr_address, UInt<12>("hf11")) @[csr.scala 113:29]
                                  when _T_15 : @[csr.scala 113:43]
                                    io.csr_read_data <= mvendorid @[csr.scala 114:22]
                                  else :
                                    node _T_16 = eq(io.csr_address, UInt<12>("hf12")) @[csr.scala 115:29]
                                    when _T_16 : @[csr.scala 115:43]
                                      io.csr_read_data <= marchid @[csr.scala 116:22]
                                    else :
                                      node _T_17 = eq(io.csr_address, UInt<12>("hf13")) @[csr.scala 117:29]
                                      when _T_17 : @[csr.scala 117:43]
                                        io.csr_read_data <= mimpid @[csr.scala 118:22]
                                      else :
                                        node _T_18 = eq(io.csr_address, UInt<12>("hf14")) @[csr.scala 119:29]
                                        when _T_18 : @[csr.scala 119:43]
                                          io.csr_read_data <= mhartid @[csr.scala 120:22]
                                        else :
                                          io.csr_read_data <= UInt<1>("h0") @[csr.scala 122:22]
    node _io_readable_T = eq(io.csr_address, UInt<12>("hb00")) @[csr.scala 126:34]
    node _io_readable_T_1 = eq(io.csr_address, UInt<12>("hc00")) @[csr.scala 126:65]
    node _io_readable_T_2 = or(_io_readable_T, _io_readable_T_1) @[csr.scala 126:47]
    node _io_readable_T_3 = eq(io.csr_address, UInt<12>("hb02")) @[csr.scala 126:96]
    node _io_readable_T_4 = or(_io_readable_T_2, _io_readable_T_3) @[csr.scala 126:78]
    node _io_readable_T_5 = eq(io.csr_address, UInt<12>("hc02")) @[csr.scala 126:127]
    node _io_readable_T_6 = or(_io_readable_T_4, _io_readable_T_5) @[csr.scala 126:109]
    node _io_readable_T_7 = eq(io.csr_address, UInt<9>("h100")) @[csr.scala 127:20]
    node _io_readable_T_8 = or(_io_readable_T_6, _io_readable_T_7) @[csr.scala 126:140]
    node _io_readable_T_9 = eq(io.csr_address, UInt<12>("hc01")) @[csr.scala 127:51]
    node _io_readable_T_10 = or(_io_readable_T_8, _io_readable_T_9) @[csr.scala 127:33]
    node _io_readable_T_11 = eq(io.csr_address, UInt<12>("hf11")) @[csr.scala 127:82]
    node _io_readable_T_12 = or(_io_readable_T_10, _io_readable_T_11) @[csr.scala 127:64]
    node _io_readable_T_13 = eq(io.csr_address, UInt<12>("hf12")) @[csr.scala 127:113]
    node _io_readable_T_14 = or(_io_readable_T_12, _io_readable_T_13) @[csr.scala 127:95]
    node _io_readable_T_15 = eq(io.csr_address, UInt<12>("hf13")) @[csr.scala 128:20]
    node _io_readable_T_16 = or(_io_readable_T_14, _io_readable_T_15) @[csr.scala 127:126]
    node _io_readable_T_17 = eq(io.csr_address, UInt<12>("hf14")) @[csr.scala 128:51]
    node _io_readable_T_18 = or(_io_readable_T_16, _io_readable_T_17) @[csr.scala 128:33]
    io.readable <= _io_readable_T_18 @[csr.scala 126:15]
    node _io_writeable_T = eq(io.csr_address, UInt<11>("h780")) @[csr.scala 129:35]
    node _io_writeable_T_1 = eq(io.csr_address, UInt<10>("h301")) @[csr.scala 129:66]
    node _io_writeable_T_2 = or(_io_writeable_T, _io_writeable_T_1) @[csr.scala 129:48]
    node _io_writeable_T_3 = eq(io.csr_address, UInt<10>("h344")) @[csr.scala 129:97]
    node _io_writeable_T_4 = or(_io_writeable_T_2, _io_writeable_T_3) @[csr.scala 129:79]
    node _io_writeable_T_5 = eq(io.csr_address, UInt<10>("h304")) @[csr.scala 130:20]
    node _io_writeable_T_6 = or(_io_writeable_T_4, _io_writeable_T_5) @[csr.scala 129:110]
    node _io_writeable_T_7 = eq(io.csr_address, UInt<10>("h305")) @[csr.scala 130:51]
    node _io_writeable_T_8 = or(_io_writeable_T_6, _io_writeable_T_7) @[csr.scala 130:33]
    node _io_writeable_T_9 = eq(io.csr_address, UInt<10>("h340")) @[csr.scala 130:82]
    node _io_writeable_T_10 = or(_io_writeable_T_8, _io_writeable_T_9) @[csr.scala 130:64]
    node _io_writeable_T_11 = eq(io.csr_address, UInt<10>("h341")) @[csr.scala 130:113]
    node _io_writeable_T_12 = or(_io_writeable_T_10, _io_writeable_T_11) @[csr.scala 130:95]
    node _io_writeable_T_13 = eq(io.csr_address, UInt<10>("h342")) @[csr.scala 131:20]
    node _io_writeable_T_14 = or(_io_writeable_T_12, _io_writeable_T_13) @[csr.scala 130:126]
    node _io_writeable_T_15 = eq(io.csr_address, UInt<10>("h343")) @[csr.scala 131:51]
    node _io_writeable_T_16 = or(_io_writeable_T_14, _io_writeable_T_15) @[csr.scala 131:33]
    io.writeable <= _io_writeable_T_16 @[csr.scala 129:16]
    when io.trapped : @[csr.scala 134:20]
      node _mstatus_T = bits(mstatus, 31, 3) @[csr.scala 135:27]
      node _mstatus_T_1 = cat(_mstatus_T, io.ecause) @[Cat.scala 31:58]
      mstatus <= _mstatus_T_1 @[csr.scala 135:13]
      mepc <= io.trap_vector @[csr.scala 136:10]
      mscratch <= io.csr_read_data @[csr.scala 137:14]
    else :
      when io.mret : @[csr.scala 138:23]
        node _mstatus_T_2 = not(UInt<4>("h8")) @[csr.scala 139:26]
        node _mstatus_T_3 = and(mstatus, _mstatus_T_2) @[csr.scala 139:24]
        mstatus <= _mstatus_T_3 @[csr.scala 139:13]
        node _mstatus_T_4 = bits(mstatus, 4, 4) @[csr.scala 140:34]
        node _mstatus_T_5 = shl(_mstatus_T_4, 3) @[csr.scala 140:41]
        node _mstatus_T_6 = or(mstatus, _mstatus_T_5) @[csr.scala 140:24]
        mstatus <= _mstatus_T_6 @[csr.scala 140:13]
        node _mstatus_T_7 = not(UInt<8>("h80")) @[csr.scala 141:26]
        node _mstatus_T_8 = and(mstatus, _mstatus_T_7) @[csr.scala 141:24]
        mstatus <= _mstatus_T_8 @[csr.scala 141:13]
        mepc <= mscratch @[csr.scala 142:10]
    when io.inst_retired : @[csr.scala 146:25]
      node _cycle_T = add(cycle, UInt<1>("h1")) @[csr.scala 147:20]
      node _cycle_T_1 = tail(_cycle_T, 1) @[csr.scala 147:20]
      cycle <= _cycle_T_1 @[csr.scala 147:11]
      node _instret_T = add(instret, UInt<1>("h1")) @[csr.scala 148:24]
      node _instret_T_1 = tail(_instret_T, 1) @[csr.scala 148:24]
      instret <= _instret_T_1 @[csr.scala 148:13]
    node _io_sip_T = and(mip, UInt<1>("h1")) @[csr.scala 152:18]
    node _io_sip_T_1 = neq(_io_sip_T, UInt<1>("h0")) @[csr.scala 152:25]
    io.sip <= _io_sip_T_1 @[csr.scala 152:10]
    node _io_tip_T = and(mip, UInt<2>("h2")) @[csr.scala 153:18]
    node _io_tip_T_1 = neq(_io_tip_T, UInt<1>("h0")) @[csr.scala 153:25]
    io.tip <= _io_tip_T_1 @[csr.scala 153:10]
    node _io_eip_T = and(mip, UInt<3>("h4")) @[csr.scala 154:18]
    node _io_eip_T_1 = neq(_io_eip_T, UInt<1>("h0")) @[csr.scala 154:25]
    io.eip <= _io_eip_T_1 @[csr.scala 154:10]
    io.trap_vector <= mepc @[csr.scala 157:18]
    io.mret_vector <= mtvec @[csr.scala 158:18]

  module Hazard :
    input clock : Clock
    input reset : Reset
    output io : { predict : UInt<1>, pc_stall : UInt<1>, if_id_stall : UInt<1>, if_id_flush : UInt<1>, flip memread : UInt<1>, flip use_rs1 : UInt<1>, flip use_rs2 : UInt<1>, flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip ex_rd : UInt<5>, flip ex_use_rs1 : UInt<1>, flip ex_use_rs2 : UInt<1>, flip ex_rs1 : UInt<5>, flip ex_rs2 : UInt<5>, flip ex_pc : UInt<32>, id_ex_flush : UInt<1>, flip mem_rd : UInt<5>, flip mem_regwrite : UInt<1>, flip mem_pc : UInt<32>, flip target_pc : UInt<32>, forward1 : UInt<2>, forward2 : UInt<2>, ex_mem_flush : UInt<1>, flip wb_rd : UInt<5>, flip wb_regwrite : UInt<1>, flip pcsrc : UInt<1>, flip trapped : UInt<1>, flip mret : UInt<1>, mem_wb_flush : UInt<1>}

    wire forward1 : UInt<2> @[hazard.scala 45:22]
    wire forward2 : UInt<2> @[hazard.scala 46:22]
    node _T = eq(io.ex_use_rs1, UInt<1>("h1")) @[hazard.scala 48:22]
    node _T_1 = eq(io.ex_rs1, io.mem_rd) @[hazard.scala 48:43]
    node _T_2 = and(_T, _T_1) @[hazard.scala 48:30]
    node _T_3 = eq(io.mem_regwrite, UInt<1>("h1")) @[hazard.scala 48:76]
    node _T_4 = and(_T_2, _T_3) @[hazard.scala 48:57]
    node _T_5 = neq(io.mem_rd, UInt<1>("h0")) @[hazard.scala 48:97]
    node _T_6 = and(_T_4, _T_5) @[hazard.scala 48:84]
    when _T_6 : @[hazard.scala 48:106]
      forward1 <= UInt<1>("h1") @[hazard.scala 49:14]
    else :
      node _T_7 = eq(io.ex_use_rs1, UInt<1>("h1")) @[hazard.scala 50:28]
      node _T_8 = eq(io.ex_rs1, io.wb_rd) @[hazard.scala 50:49]
      node _T_9 = and(_T_7, _T_8) @[hazard.scala 50:36]
      node _T_10 = eq(io.wb_regwrite, UInt<1>("h1")) @[hazard.scala 50:80]
      node _T_11 = and(_T_9, _T_10) @[hazard.scala 50:62]
      node _T_12 = neq(io.wb_rd, UInt<1>("h0")) @[hazard.scala 50:100]
      node _T_13 = and(_T_11, _T_12) @[hazard.scala 50:88]
      when _T_13 : @[hazard.scala 50:109]
        forward1 <= UInt<2>("h2") @[hazard.scala 51:14]
      else :
        forward1 <= UInt<1>("h0") @[hazard.scala 53:14]
    node _T_14 = eq(io.ex_use_rs2, UInt<1>("h1")) @[hazard.scala 56:22]
    node _T_15 = eq(io.ex_rs2, io.mem_rd) @[hazard.scala 56:43]
    node _T_16 = and(_T_14, _T_15) @[hazard.scala 56:30]
    node _T_17 = eq(io.mem_regwrite, UInt<1>("h1")) @[hazard.scala 56:76]
    node _T_18 = and(_T_16, _T_17) @[hazard.scala 56:57]
    node _T_19 = neq(io.mem_rd, UInt<1>("h0")) @[hazard.scala 56:97]
    node _T_20 = and(_T_18, _T_19) @[hazard.scala 56:84]
    when _T_20 : @[hazard.scala 56:106]
      forward2 <= UInt<1>("h1") @[hazard.scala 57:14]
    else :
      node _T_21 = eq(io.ex_use_rs2, UInt<1>("h1")) @[hazard.scala 58:28]
      node _T_22 = eq(io.ex_rs2, io.wb_rd) @[hazard.scala 58:49]
      node _T_23 = and(_T_21, _T_22) @[hazard.scala 58:36]
      node _T_24 = eq(io.wb_regwrite, UInt<1>("h1")) @[hazard.scala 58:80]
      node _T_25 = and(_T_23, _T_24) @[hazard.scala 58:62]
      node _T_26 = neq(io.wb_rd, UInt<1>("h0")) @[hazard.scala 58:100]
      node _T_27 = and(_T_25, _T_26) @[hazard.scala 58:88]
      when _T_27 : @[hazard.scala 58:109]
        forward2 <= UInt<2>("h2") @[hazard.scala 59:14]
      else :
        forward2 <= UInt<1>("h0") @[hazard.scala 61:14]
    io.forward1 <= forward1 @[hazard.scala 65:15]
    io.forward2 <= forward2 @[hazard.scala 66:15]
    node _hazard_T = eq(io.memread, UInt<1>("h1")) @[hazard.scala 69:27]
    node _hazard_T_1 = eq(io.use_rs1, UInt<1>("h1")) @[hazard.scala 69:51]
    node _hazard_T_2 = eq(io.id_rs1, io.ex_rd) @[hazard.scala 69:72]
    node _hazard_T_3 = and(_hazard_T_1, _hazard_T_2) @[hazard.scala 69:59]
    node _hazard_T_4 = eq(io.use_rs2, UInt<1>("h1")) @[hazard.scala 69:101]
    node _hazard_T_5 = eq(io.id_rs2, io.ex_rd) @[hazard.scala 69:121]
    node _hazard_T_6 = and(_hazard_T_4, _hazard_T_5) @[hazard.scala 69:109]
    node _hazard_T_7 = or(_hazard_T_3, _hazard_T_6) @[hazard.scala 69:86]
    node hazard = and(_hazard_T, _hazard_T_7) @[hazard.scala 69:35]
    io.pc_stall <= hazard @[hazard.scala 72:15]
    io.if_id_stall <= hazard @[hazard.scala 73:18]
    wire controlHazard : UInt<1>
    controlHazard <= UInt<1>("h0")
    wire predict : UInt<1>
    predict <= UInt<1>("h0")
    node _T_28 = eq(io.pcsrc, UInt<1>("h1")) @[hazard.scala 79:17]
    node _T_29 = neq(io.target_pc, io.ex_pc) @[hazard.scala 79:41]
    node _T_30 = and(_T_28, _T_29) @[hazard.scala 79:25]
    when _T_30 : @[hazard.scala 79:55]
      controlHazard <= UInt<1>("h1") @[hazard.scala 80:19]
    node _T_31 = eq(io.pcsrc, UInt<1>("h0")) @[hazard.scala 83:17]
    node _T_32 = add(io.mem_pc, UInt<3>("h4")) @[hazard.scala 83:52]
    node _T_33 = tail(_T_32, 1) @[hazard.scala 83:52]
    node _T_34 = neq(io.ex_pc, _T_33) @[hazard.scala 83:37]
    node _T_35 = and(_T_31, _T_34) @[hazard.scala 83:25]
    when _T_35 : @[hazard.scala 83:60]
      controlHazard <= UInt<1>("h1") @[hazard.scala 84:19]
    node _T_36 = eq(io.pcsrc, UInt<1>("h1")) @[hazard.scala 87:17]
    node _T_37 = eq(io.target_pc, io.ex_pc) @[hazard.scala 87:41]
    node _T_38 = and(_T_36, _T_37) @[hazard.scala 87:25]
    when _T_38 : @[hazard.scala 87:55]
      predict <= UInt<1>("h1") @[hazard.scala 88:13]
    node _io_if_id_flush_T = eq(io.trapped, UInt<1>("h1")) @[hazard.scala 92:49]
    node _io_if_id_flush_T_1 = or(controlHazard, _io_if_id_flush_T) @[hazard.scala 92:35]
    node _io_if_id_flush_T_2 = eq(io.mret, UInt<1>("h1")) @[hazard.scala 92:68]
    node _io_if_id_flush_T_3 = or(_io_if_id_flush_T_1, _io_if_id_flush_T_2) @[hazard.scala 92:57]
    io.if_id_flush <= _io_if_id_flush_T_3 @[hazard.scala 92:18]
    node _io_ex_mem_flush_T = eq(io.trapped, UInt<1>("h1")) @[hazard.scala 93:50]
    node _io_ex_mem_flush_T_1 = or(controlHazard, _io_ex_mem_flush_T) @[hazard.scala 93:36]
    node _io_ex_mem_flush_T_2 = eq(io.mret, UInt<1>("h1")) @[hazard.scala 93:69]
    node _io_ex_mem_flush_T_3 = or(_io_ex_mem_flush_T_1, _io_ex_mem_flush_T_2) @[hazard.scala 93:58]
    io.ex_mem_flush <= _io_ex_mem_flush_T_3 @[hazard.scala 93:19]
    node _io_id_ex_flush_T = or(hazard, controlHazard) @[hazard.scala 95:28]
    node _io_id_ex_flush_T_1 = eq(io.trapped, UInt<1>("h1")) @[hazard.scala 95:59]
    node _io_id_ex_flush_T_2 = or(_io_id_ex_flush_T, _io_id_ex_flush_T_1) @[hazard.scala 95:45]
    node _io_id_ex_flush_T_3 = eq(io.mret, UInt<1>("h1")) @[hazard.scala 95:78]
    node _io_id_ex_flush_T_4 = or(_io_id_ex_flush_T_2, _io_id_ex_flush_T_3) @[hazard.scala 95:67]
    io.id_ex_flush <= _io_id_ex_flush_T_4 @[hazard.scala 95:18]
    node _io_mem_wb_flush_T = eq(io.trapped, UInt<1>("h1")) @[hazard.scala 96:33]
    node _io_mem_wb_flush_T_1 = eq(io.mret, UInt<1>("h1")) @[hazard.scala 96:52]
    node _io_mem_wb_flush_T_2 = or(_io_mem_wb_flush_T, _io_mem_wb_flush_T_1) @[hazard.scala 96:41]
    io.mem_wb_flush <= _io_mem_wb_flush_T_2 @[hazard.scala 96:19]
    io.predict <= predict @[hazard.scala 98:14]

  module core :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip meip : UInt<1>, trapped : UInt<1>}

    inst fetch of Fetch @[core.scala 10:21]
    fetch.clock <= clock
    fetch.reset <= reset
    inst decode of Decode @[core.scala 11:22]
    decode.clock <= clock
    decode.reset <= reset
    inst execute of Execute @[core.scala 12:23]
    execute.clock <= clock
    execute.reset <= reset
    inst memory of Memory @[core.scala 13:22]
    memory.clock <= clock
    memory.reset <= reset
    inst writeback of Writeback @[core.scala 14:25]
    writeback.clock <= clock
    writeback.reset <= reset
    inst csr of CSR @[core.scala 15:19]
    csr.clock <= clock
    csr.reset <= reset
    inst hazard of Hazard @[core.scala 16:22]
    hazard.clock <= clock
    hazard.reset <= reset
    fetch.io.trap_vector <= csr.io.trap_vector @[core.scala 19:24]
    fetch.io.mret_vector <= csr.io.mret_vector @[core.scala 20:24]
    fetch.io.target_pc <= execute.io.target_pc @[core.scala 21:22]
    fetch.io.mem_pc <= execute.io.mem_pc @[core.scala 22:19]
    fetch.io.pcsrc <= memory.io.pcsrc @[core.scala 23:18]
    fetch.io.branch <= memory.io.branch @[core.scala 24:19]
    fetch.io.trap <= memory.io.trapped @[core.scala 25:17]
    fetch.io.mret <= memory.io.mret_out @[core.scala 26:17]
    fetch.io.pc_stall <= hazard.io.pc_stall @[core.scala 27:21]
    fetch.io.if_id_stall <= hazard.io.if_id_stall @[core.scala 28:24]
    fetch.io.if_id_flush <= hazard.io.if_id_flush @[core.scala 29:24]
    fetch.io.predict <= hazard.io.predict @[core.scala 30:20]
    decode.io.id_pc <= fetch.io.id_pc @[core.scala 32:19]
    decode.io.inst <= fetch.io.inst @[core.scala 33:18]
    decode.io.wb_rd <= memory.io.wb_rd @[core.scala 34:19]
    decode.io.wb_regwrite <= memory.io.wb_regwrite @[core.scala 35:25]
    decode.io.writedata <= writeback.io.writedata @[core.scala 36:23]
    decode.io.id_ex_flush <= hazard.io.id_ex_flush @[core.scala 37:25]
    execute.io.csr_read <= decode.io.csr_read @[core.scala 39:23]
    execute.io.csr_write <= decode.io.csr_write @[core.scala 40:24]
    execute.io.csr_address <= decode.io.csr_address @[core.scala 41:26]
    execute.io.ecause_in <= decode.io.ecause_out @[core.scala 42:24]
    execute.io.exception_in <= decode.io.exception_out @[core.scala 43:27]
    execute.io.mret_in <= decode.io.mret_out @[core.scala 44:22]
    execute.io.wfi_in <= decode.io.wfi_out @[core.scala 45:21]
    execute.io.ex_pc <= decode.io.ex_pc @[core.scala 46:20]
    execute.io.aluop <= decode.io.aluop @[core.scala 47:20]
    execute.io.immsrc <= decode.io.immsrc @[core.scala 48:21]
    execute.io.isbranch <= decode.io.isbranch @[core.scala 49:23]
    execute.io.memread <= decode.io.memread @[core.scala 50:22]
    execute.io.memwrite <= decode.io.memwrite @[core.scala 51:23]
    execute.io.regwrite <= decode.io.regwrite @[core.scala 52:23]
    execute.io.memtoreg <= decode.io.memtoreg @[core.scala 53:23]
    execute.io.pcsel <= decode.io.pcsel @[core.scala 54:20]
    execute.io.rdsel <= decode.io.rdsel @[core.scala 55:20]
    execute.io.isjump <= decode.io.isjump @[core.scala 56:21]
    execute.io.islui <= decode.io.islui @[core.scala 57:20]
    execute.io.rs1_data <= decode.io.rs1_data @[core.scala 58:23]
    execute.io.rs2_data <= decode.io.rs2_data @[core.scala 59:23]
    execute.io.imm <= decode.io.imm @[core.scala 60:18]
    execute.io.funct3 <= decode.io.funct3 @[core.scala 61:21]
    execute.io.ex_rs1 <= decode.io.ex_rs1 @[core.scala 62:21]
    execute.io.ex_rd <= decode.io.ex_rd @[core.scala 63:20]
    execute.io.csr_read_data <= csr.io.csr_read_data @[core.scala 64:28]
    execute.io.readable <= csr.io.readable @[core.scala 65:23]
    execute.io.writeable <= csr.io.writeable @[core.scala 66:24]
    execute.io.writedata <= writeback.io.writedata @[core.scala 67:24]
    execute.io.forward1 <= hazard.io.forward1 @[core.scala 68:23]
    execute.io.forward2 <= hazard.io.forward2 @[core.scala 69:23]
    execute.io.ex_mem_flush <= hazard.io.ex_mem_flush @[core.scala 70:27]
    memory.io.csr_read_data_in <= execute.io.csr_read_data_out @[core.scala 72:30]
    memory.io.csr_write_enable_in <= execute.io.csr_write_enable_out @[core.scala 73:33]
    memory.io.csr_write_address_in <= execute.io.csr_write_address_out @[core.scala 74:34]
    memory.io.csr_write_data_in <= execute.io.csr_write_data_out @[core.scala 75:31]
    memory.io.ecause_in <= execute.io.ecause_out @[core.scala 76:23]
    memory.io.exception_in <= execute.io.exception_out @[core.scala 77:26]
    memory.io.mret_in <= execute.io.mret_out @[core.scala 78:21]
    memory.io.wfi_in <= execute.io.wfi_out @[core.scala 79:20]
    memory.io.reg_pc <= execute.io.reg_pc @[core.scala 80:20]
    memory.io.mem_isbranch <= execute.io.mem_isbranch @[core.scala 81:26]
    memory.io.mem_isjump <= execute.io.mem_isjump @[core.scala 82:24]
    memory.io.mem_memread <= execute.io.mem_memread @[core.scala 83:25]
    memory.io.mem_memwrite <= execute.io.mem_memwrite @[core.scala 84:26]
    memory.io.mem_regwrite <= execute.io.mem_regwrite @[core.scala 85:26]
    memory.io.mem_memtoreg <= execute.io.mem_memtoreg @[core.scala 86:26]
    memory.io.mem_zero <= execute.io.mem_zero @[core.scala 87:22]
    memory.io.mem_aluresult <= execute.io.mem_aluresult @[core.scala 88:27]
    memory.io.mem_rs2_data <= execute.io.mem_rs2_data @[core.scala 89:26]
    memory.io.mem_funct3 <= execute.io.mem_funct3 @[core.scala 90:24]
    memory.io.mem_rd <= execute.io.mem_rd @[core.scala 91:20]
    memory.io.sip <= csr.io.sip @[core.scala 92:17]
    memory.io.tip <= csr.io.tip @[core.scala 93:17]
    memory.io.eip <= csr.io.eip @[core.scala 94:17]
    memory.io.mem_wb_flush <= hazard.io.mem_wb_flush @[core.scala 95:26]
    writeback.io.csr_read_data_in <= memory.io.csr_read_data_out @[core.scala 97:33]
    writeback.io.wb_reg_pc <= memory.io.wb_reg_pc @[core.scala 98:26]
    writeback.io.wb_readdata <= memory.io.wb_readdata @[core.scala 99:28]
    writeback.io.wb_aluresult <= memory.io.wb_aluresult @[core.scala 100:29]
    writeback.io.wb_memtoreg <= memory.io.wb_memtoreg @[core.scala 101:28]
    csr.io.meip <= io.meip @[core.scala 103:15]
    csr.io.csr_address <= decode.io.csr_address @[core.scala 104:22]
    csr.io.csr_write_enable <= memory.io.csr_write_enable_out @[core.scala 105:27]
    csr.io.csr_write_address <= memory.io.csr_write_address_out @[core.scala 106:28]
    csr.io.csr_write_data <= memory.io.csr_write_data_out @[core.scala 107:25]
    csr.io.inst_retired <= memory.io.inst_retired @[core.scala 108:23]
    csr.io.trapped <= memory.io.trapped @[core.scala 109:18]
    csr.io.interrupt <= memory.io.interrupt @[core.scala 110:20]
    csr.io.mret <= memory.io.mret_out @[core.scala 111:15]
    csr.io.ecause <= memory.io.ecause_out @[core.scala 112:17]
    hazard.io.memread <= decode.io.memread @[core.scala 114:21]
    hazard.io.use_rs1 <= decode.io.use_rs1 @[core.scala 115:21]
    hazard.io.use_rs2 <= decode.io.use_rs2 @[core.scala 116:21]
    hazard.io.id_rs1 <= decode.io.id_rs1 @[core.scala 117:20]
    hazard.io.id_rs2 <= decode.io.id_rs2 @[core.scala 118:20]
    hazard.io.ex_rd <= decode.io.ex_rd @[core.scala 119:19]
    hazard.io.ex_use_rs1 <= decode.io.ex_use_rs1 @[core.scala 120:24]
    hazard.io.ex_use_rs2 <= decode.io.ex_use_rs2 @[core.scala 121:24]
    hazard.io.ex_rs1 <= decode.io.ex_rs1 @[core.scala 122:20]
    hazard.io.ex_rs2 <= decode.io.ex_rs2 @[core.scala 123:20]
    hazard.io.ex_pc <= decode.io.ex_pc @[core.scala 124:19]
    hazard.io.mem_rd <= execute.io.mem_rd @[core.scala 125:20]
    hazard.io.mem_regwrite <= execute.io.mem_regwrite @[core.scala 126:26]
    hazard.io.mem_pc <= execute.io.mem_pc @[core.scala 127:20]
    hazard.io.target_pc <= execute.io.target_pc @[core.scala 128:23]
    hazard.io.wb_rd <= memory.io.wb_rd @[core.scala 129:19]
    hazard.io.wb_regwrite <= memory.io.wb_regwrite @[core.scala 130:25]
    hazard.io.pcsrc <= memory.io.pcsrc @[core.scala 131:19]
    hazard.io.trapped <= memory.io.trapped @[core.scala 132:21]
    hazard.io.mret <= memory.io.mret_out @[core.scala 133:18]
    io.trapped <= memory.io.trapped @[core.scala 137:13]

