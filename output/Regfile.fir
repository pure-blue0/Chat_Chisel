circuit Regfile :
  module Regfile :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip id_rs1 : UInt<5>, flip id_rs2 : UInt<5>, flip wb_rd : UInt<5>, flip writedata : UInt<32>, flip wb_regwrite : UInt<1>, rs1_data : UInt<32>, rs2_data : UInt<32>}

    wire _registers_WIRE : UInt<32>[32] @[regfile.scala 17:34]
    _registers_WIRE[0] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[1] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[2] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[3] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[4] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[5] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[6] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[7] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[8] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[9] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[10] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[11] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[12] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[13] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[14] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[15] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[16] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[17] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[18] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[19] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[20] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[21] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[22] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[23] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[24] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[25] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[26] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[27] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[28] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[29] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[30] <= UInt<32>("h0") @[regfile.scala 17:34]
    _registers_WIRE[31] <= UInt<32>("h0") @[regfile.scala 17:34]
    reg registers : UInt<32>[32], clock with :
      reset => (reset, _registers_WIRE) @[regfile.scala 17:26]
    node _io_rs1_data_T = eq(io.id_rs1, UInt<1>("h0")) @[regfile.scala 20:32]
    node _io_rs1_data_T_1 = mux(_io_rs1_data_T, UInt<1>("h0"), registers[io.id_rs1]) @[regfile.scala 20:21]
    io.rs1_data <= _io_rs1_data_T_1 @[regfile.scala 20:15]
    node _io_rs2_data_T = eq(io.id_rs2, UInt<1>("h0")) @[regfile.scala 21:32]
    node _io_rs2_data_T_1 = mux(_io_rs2_data_T, UInt<1>("h0"), registers[io.id_rs2]) @[regfile.scala 21:21]
    io.rs2_data <= _io_rs2_data_T_1 @[regfile.scala 21:15]
    node _T = neq(io.wb_rd, UInt<1>("h0")) @[regfile.scala 24:35]
    node _T_1 = and(io.wb_regwrite, _T) @[regfile.scala 24:23]
    when _T_1 : @[regfile.scala 24:44]
      registers[io.wb_rd] <= io.writedata @[regfile.scala 25:25]

